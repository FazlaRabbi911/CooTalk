{
  "version": 3,
  "sources": ["../../../../../node_modules/@remix-run/router/history.ts", "../../../../../node_modules/@remix-run/router/utils.ts", "../../../../../node_modules/@remix-run/router/router.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData\n  status?: number;\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  unstable_actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  unstable_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n\n      let actionData: Record<string, RouteData> | null | undefined;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data as any,\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData !== undefined ? { actionData } : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type, status } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result, statusCode: status };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],
  "mappings": ";;;;;;;;;;;;;;;IAOYA;CAAZ,SAAYA,SAAM;AAQhBA,EAAAA,QAAA,KAAA,IAAA;AAOAA,EAAAA,QAAA,MAAA,IAAA;AAMAA,EAAAA,QAAA,SAAA,IAAA;AACF,GAtBYA,WAAAA,SAsBX,CAAA,EAAA;AAqKD,IAAMC,oBAAoB;AAmCV,SAAAC,oBACdC,SAAkC;AAAA,MAAlCA,YAAA,QAAA;AAAAA,cAAgC,CAAA;EAAE;AAElC,MAAI;IAAEC,iBAAiB,CAAC,GAAG;IAAGC;IAAcC,WAAW;EAAO,IAAGH;AACjE,MAAII;AACJA,YAAUH,eAAeI,IAAI,CAACC,OAAOC,WACnCC,qBACEF,OACA,OAAOA,UAAU,WAAW,OAAOA,MAAMG,OACzCF,WAAU,IAAI,YAAYG,MAAS,CACpC;AAEH,MAAIH,QAAQI,WACVT,gBAAgB,OAAOE,QAAQQ,SAAS,IAAIV,YAAY;AAE1D,MAAIW,SAAShB,OAAOiB;AACpB,MAAIC,WAA4B;AAEhC,WAASJ,WAAWK,GAAS;AAC3B,WAAOC,KAAKC,IAAID,KAAKE,IAAIH,GAAG,CAAC,GAAGZ,QAAQQ,SAAS,CAAC;EACpD;AACA,WAASQ,qBAAkB;AACzB,WAAOhB,QAAQG,KAAK;EACtB;AACA,WAASC,qBACPa,IACAZ,OACAa,KAAY;AAAA,QADZb,UAAa,QAAA;AAAbA,cAAa;IAAI;AAGjB,QAAIc,WAAWC,eACbpB,UAAUgB,mBAAkB,EAAGK,WAAW,KAC1CJ,IACAZ,OACAa,GAAG;AAELI,YACEH,SAASE,SAASE,OAAO,CAAC,MAAM,KAAG,6DACwBC,KAAKC,UAC9DR,EAAE,CACD;AAEL,WAAOE;EACT;AAEA,WAASO,WAAWT,IAAM;AACxB,WAAO,OAAOA,OAAO,WAAWA,KAAKU,WAAWV,EAAE;EACpD;AAEA,MAAIW,UAAyB;IAC3B,IAAIzB,QAAK;AACP,aAAOA;;IAET,IAAIM,SAAM;AACR,aAAOA;;IAET,IAAIU,WAAQ;AACV,aAAOH,mBAAkB;;IAE3BU;IACAG,UAAUZ,IAAE;AACV,aAAO,IAAIa,IAAIJ,WAAWT,EAAE,GAAG,kBAAkB;;IAEnDc,eAAed,IAAM;AACnB,UAAIe,OAAO,OAAOf,OAAO,WAAWgB,UAAUhB,EAAE,IAAIA;AACpD,aAAO;QACLI,UAAUW,KAAKX,YAAY;QAC3Ba,QAAQF,KAAKE,UAAU;QACvBC,MAAMH,KAAKG,QAAQ;;;IAGvBC,KAAKnB,IAAIZ,OAAK;AACZI,eAAShB,OAAO4C;AAChB,UAAIC,eAAelC,qBAAqBa,IAAIZ,KAAK;AACjDF,eAAS;AACTH,cAAQuC,OAAOpC,OAAOH,QAAQQ,QAAQ8B,YAAY;AAClD,UAAIvC,YAAYY,UAAU;AACxBA,iBAAS;UAAEF;UAAQU,UAAUmB;UAAcE,OAAO;QAAC,CAAE;MACtD;;IAEHC,QAAQxB,IAAIZ,OAAK;AACfI,eAAShB,OAAOiD;AAChB,UAAIJ,eAAelC,qBAAqBa,IAAIZ,KAAK;AACjDL,cAAQG,KAAK,IAAImC;AACjB,UAAIvC,YAAYY,UAAU;AACxBA,iBAAS;UAAEF;UAAQU,UAAUmB;UAAcE,OAAO;QAAC,CAAE;MACtD;;IAEHG,GAAGH,OAAK;AACN/B,eAAShB,OAAOiB;AAChB,UAAIkC,YAAYrC,WAAWJ,QAAQqC,KAAK;AACxC,UAAIF,eAAetC,QAAQ4C,SAAS;AACpCzC,cAAQyC;AACR,UAAIjC,UAAU;AACZA,iBAAS;UAAEF;UAAQU,UAAUmB;UAAcE;QAAO,CAAA;MACnD;;IAEHK,OAAOC,IAAY;AACjBnC,iBAAWmC;AACX,aAAO,MAAK;AACVnC,mBAAW;;IAEf;;AAGF,SAAOiB;AACT;AAyBgB,SAAAmB,qBACdnD,SAAmC;AAAA,MAAnCA,YAAA,QAAA;AAAAA,cAAiC,CAAA;EAAE;AAEnC,WAASoD,sBACPC,SACAC,eAAgC;AAEhC,QAAI;MAAE7B;MAAUa;MAAQC;QAASc,QAAO9B;AACxC,WAAOC;MACL;MACA;QAAEC;QAAUa;QAAQC;;;MAEnBe,cAAc7C,SAAS6C,cAAc7C,MAAM8C,OAAQ;MACnDD,cAAc7C,SAAS6C,cAAc7C,MAAMa,OAAQ;IAAS;EAEjE;AAEA,WAASkC,kBAAkBH,SAAgBhC,IAAM;AAC/C,WAAO,OAAOA,OAAO,WAAWA,KAAKU,WAAWV,EAAE;EACpD;AAEA,SAAOoC,mBACLL,uBACAI,mBACA,MACAxD,OAAO;AAEX;AA8BgB,SAAA0D,kBACd1D,SAAgC;AAAA,MAAhCA,YAAA,QAAA;AAAAA,cAA8B,CAAA;EAAE;AAEhC,WAAS2D,mBACPN,SACAC,eAAgC;AAEhC,QAAI;MACF7B,WAAW;MACXa,SAAS;MACTC,OAAO;IAAE,IACPF,UAAUgB,QAAO9B,SAASgB,KAAKqB,OAAO,CAAC,CAAC;AAQ5C,QAAI,CAACnC,SAASoC,WAAW,GAAG,KAAK,CAACpC,SAASoC,WAAW,GAAG,GAAG;AAC1DpC,iBAAW,MAAMA;IAClB;AAED,WAAOD;MACL;MACA;QAAEC;QAAUa;QAAQC;;;MAEnBe,cAAc7C,SAAS6C,cAAc7C,MAAM8C,OAAQ;MACnDD,cAAc7C,SAAS6C,cAAc7C,MAAMa,OAAQ;IAAS;EAEjE;AAEA,WAASwC,eAAeT,SAAgBhC,IAAM;AAC5C,QAAI0C,OAAOV,QAAOW,SAASC,cAAc,MAAM;AAC/C,QAAIC,OAAO;AAEX,QAAIH,QAAQA,KAAKI,aAAa,MAAM,GAAG;AACrC,UAAIC,MAAMf,QAAO9B,SAAS2C;AAC1B,UAAIG,YAAYD,IAAIE,QAAQ,GAAG;AAC/BJ,aAAOG,cAAc,KAAKD,MAAMA,IAAIG,MAAM,GAAGF,SAAS;IACvD;AAED,WAAOH,OAAO,OAAO,OAAO7C,OAAO,WAAWA,KAAKU,WAAWV,EAAE;EAClE;AAEA,WAASmD,qBAAqBjD,UAAoBF,IAAM;AACtDK,YACEH,SAASE,SAASE,OAAO,CAAC,MAAM,KAAG,+DAC0BC,KAAKC,UAChER,EAAE,IACH,GAAG;EAER;AAEA,SAAOoC,mBACLE,oBACAG,gBACAU,sBACAxE,OAAO;AAEX;AAegB,SAAAyE,UAAUC,OAAYC,SAAgB;AACpD,MAAID,UAAU,SAASA,UAAU,QAAQ,OAAOA,UAAU,aAAa;AACrE,UAAM,IAAIE,MAAMD,OAAO;EACxB;AACH;AAEgB,SAAAjD,QAAQmD,MAAWF,SAAe;AAChD,MAAI,CAACE,MAAM;AAET,QAAI,OAAOC,YAAY;AAAaA,cAAQC,KAAKJ,OAAO;AAExD,QAAI;AAMF,YAAM,IAAIC,MAAMD,OAAO;IAExB,SAAQK,GAAG;IAAA;EACb;AACH;AAEA,SAASC,YAAS;AAChB,SAAOhE,KAAKiE,OAAM,EAAGC,SAAS,EAAE,EAAEvB,OAAO,GAAG,CAAC;AAC/C;AAKA,SAASwB,gBAAgB7D,UAAoBhB,OAAa;AACxD,SAAO;IACLgD,KAAKhC,SAASd;IACda,KAAKC,SAASD;IACd+D,KAAK9E;;AAET;AAKM,SAAUiB,eACd8D,SACAjE,IACAZ,OACAa,KAAY;AAAA,MADZb,UAAA,QAAA;AAAAA,YAAa;EAAI;AAGjB,MAAIc,WAAQgE,SAAA;IACV9D,UAAU,OAAO6D,YAAY,WAAWA,UAAUA,QAAQ7D;IAC1Da,QAAQ;IACRC,MAAM;KACF,OAAOlB,OAAO,WAAWgB,UAAUhB,EAAE,IAAIA,IAAE;IAC/CZ;;;;;IAKAa,KAAMD,MAAOA,GAAgBC,OAAQA,OAAO2D,UAAS;GACtD;AACD,SAAO1D;AACT;AAKgB,SAAAQ,WAAUyD,MAIV;AAAA,MAJW;IACzB/D,WAAW;IACXa,SAAS;IACTC,OAAO;EACO,IAAAiD;AACd,MAAIlD,UAAUA,WAAW;AACvBb,gBAAYa,OAAOX,OAAO,CAAC,MAAM,MAAMW,SAAS,MAAMA;AACxD,MAAIC,QAAQA,SAAS;AACnBd,gBAAYc,KAAKZ,OAAO,CAAC,MAAM,MAAMY,OAAO,MAAMA;AACpD,SAAOd;AACT;AAKM,SAAUY,UAAUD,MAAY;AACpC,MAAIqD,aAA4B,CAAA;AAEhC,MAAIrD,MAAM;AACR,QAAIiC,YAAYjC,KAAKkC,QAAQ,GAAG;AAChC,QAAID,aAAa,GAAG;AAClBoB,iBAAWlD,OAAOH,KAAKwB,OAAOS,SAAS;AACvCjC,aAAOA,KAAKwB,OAAO,GAAGS,SAAS;IAChC;AAED,QAAIqB,cAActD,KAAKkC,QAAQ,GAAG;AAClC,QAAIoB,eAAe,GAAG;AACpBD,iBAAWnD,SAASF,KAAKwB,OAAO8B,WAAW;AAC3CtD,aAAOA,KAAKwB,OAAO,GAAG8B,WAAW;IAClC;AAED,QAAItD,MAAM;AACRqD,iBAAWhE,WAAWW;IACvB;EACF;AAED,SAAOqD;AACT;AASA,SAAShC,mBACPkC,aACA7D,YACA8D,kBACA5F,SAA+B;AAAA,MAA/BA,YAAA,QAAA;AAAAA,cAA6B,CAAA;EAAE;AAE/B,MAAI;IAAEqD,QAAAA,UAASW,SAAS6B;IAAc1F,WAAW;EAAO,IAAGH;AAC3D,MAAIsD,gBAAgBD,QAAOrB;AAC3B,MAAInB,SAAShB,OAAOiB;AACpB,MAAIC,WAA4B;AAEhC,MAAIR,QAAQuF,SAAQ;AAIpB,MAAIvF,SAAS,MAAM;AACjBA,YAAQ;AACR+C,kBAAcyC,aAAYR,SAAMjC,CAAAA,GAAAA,cAAc7C,OAAK;MAAE4E,KAAK9E;IAAK,CAAA,GAAI,EAAE;EACtE;AAED,WAASuF,WAAQ;AACf,QAAIrF,QAAQ6C,cAAc7C,SAAS;MAAE4E,KAAK;;AAC1C,WAAO5E,MAAM4E;EACf;AAEA,WAASW,YAAS;AAChBnF,aAAShB,OAAOiB;AAChB,QAAIkC,YAAY8C,SAAQ;AACxB,QAAIlD,QAAQI,aAAa,OAAO,OAAOA,YAAYzC;AACnDA,YAAQyC;AACR,QAAIjC,UAAU;AACZA,eAAS;QAAEF;QAAQU,UAAUS,QAAQT;QAAUqB;MAAK,CAAE;IACvD;EACH;AAEA,WAASJ,KAAKnB,IAAQZ,OAAW;AAC/BI,aAAShB,OAAO4C;AAChB,QAAIlB,WAAWC,eAAeQ,QAAQT,UAAUF,IAAIZ,KAAK;AACzD,QAAImF;AAAkBA,uBAAiBrE,UAAUF,EAAE;AAEnDd,YAAQuF,SAAQ,IAAK;AACrB,QAAIG,eAAeb,gBAAgB7D,UAAUhB,KAAK;AAClD,QAAI6D,MAAMpC,QAAQF,WAAWP,QAAQ;AAGrC,QAAI;AACF+B,oBAAc4C,UAAUD,cAAc,IAAI7B,GAAG;aACtC+B,OAAO;AAKd,UAAIA,iBAAiBC,gBAAgBD,MAAME,SAAS,kBAAkB;AACpE,cAAMF;MACP;AAGD9C,MAAAA,QAAO9B,SAAS+E,OAAOlC,GAAG;IAC3B;AAED,QAAIjE,YAAYY,UAAU;AACxBA,eAAS;QAAEF;QAAQU,UAAUS,QAAQT;QAAUqB,OAAO;MAAC,CAAE;IAC1D;EACH;AAEA,WAASC,QAAQxB,IAAQZ,OAAW;AAClCI,aAAShB,OAAOiD;AAChB,QAAIvB,WAAWC,eAAeQ,QAAQT,UAAUF,IAAIZ,KAAK;AACzD,QAAImF;AAAkBA,uBAAiBrE,UAAUF,EAAE;AAEnDd,YAAQuF,SAAQ;AAChB,QAAIG,eAAeb,gBAAgB7D,UAAUhB,KAAK;AAClD,QAAI6D,MAAMpC,QAAQF,WAAWP,QAAQ;AACrC+B,kBAAcyC,aAAaE,cAAc,IAAI7B,GAAG;AAEhD,QAAIjE,YAAYY,UAAU;AACxBA,eAAS;QAAEF;QAAQU,UAAUS,QAAQT;QAAUqB,OAAO;MAAC,CAAE;IAC1D;EACH;AAEA,WAASX,UAAUZ,IAAM;AAIvB,QAAI0C,OACFV,QAAO9B,SAASgF,WAAW,SACvBlD,QAAO9B,SAASgF,SAChBlD,QAAO9B,SAAS2C;AAEtB,QAAIA,OAAO,OAAO7C,OAAO,WAAWA,KAAKU,WAAWV,EAAE;AAItD6C,WAAOA,KAAKrB,QAAQ,MAAM,KAAK;AAC/B4B,cACEV,MACsEG,wEAAAA,IAAM;AAE9E,WAAO,IAAIhC,IAAIgC,MAAMH,IAAI;EAC3B;AAEA,MAAI/B,UAAmB;IACrB,IAAInB,SAAM;AACR,aAAOA;;IAET,IAAIU,WAAQ;AACV,aAAOoE,YAAYtC,SAAQC,aAAa;;IAE1CL,OAAOC,IAAY;AACjB,UAAInC,UAAU;AACZ,cAAM,IAAI6D,MAAM,4CAA4C;MAC7D;AACDvB,MAAAA,QAAOmD,iBAAiB1G,mBAAmBkG,SAAS;AACpDjF,iBAAWmC;AAEX,aAAO,MAAK;AACVG,QAAAA,QAAOoD,oBAAoB3G,mBAAmBkG,SAAS;AACvDjF,mBAAW;;;IAGfe,WAAWT,IAAE;AACX,aAAOS,WAAWuB,SAAQhC,EAAE;;IAE9BY;IACAE,eAAed,IAAE;AAEf,UAAI+C,MAAMnC,UAAUZ,EAAE;AACtB,aAAO;QACLI,UAAU2C,IAAI3C;QACda,QAAQ8B,IAAI9B;QACZC,MAAM6B,IAAI7B;;;IAGdC;IACAK;IACAE,GAAG/B,GAAC;AACF,aAAOsC,cAAcP,GAAG/B,CAAC;IAC3B;;AAGF,SAAOgB;AACT;AC7tBA,IAAY0E;CAAZ,SAAYA,aAAU;AACpBA,EAAAA,YAAA,MAAA,IAAA;AACAA,EAAAA,YAAA,UAAA,IAAA;AACAA,EAAAA,YAAA,UAAA,IAAA;AACAA,EAAAA,YAAA,OAAA,IAAA;AACF,GALYA,eAAAA,aAKX,CAAA,EAAA;AAyQM,IAAMC,qBAAqB,oBAAIC,IAAuB,CAC3D,QACA,iBACA,QACA,MACA,SACA,UAAU,CACX;AAoJD,SAASC,aACPC,OAA0B;AAE1B,SAAOA,MAAMvG,UAAU;AACzB;AAIM,SAAUwG,0BACdC,QACAC,oBACAC,YACAC,UAA4B;AAAA,MAD5BD,eAAuB,QAAA;AAAvBA,iBAAuB,CAAA;EAAE;AAAA,MACzBC,aAAA,QAAA;AAAAA,eAA0B,CAAA;EAAE;AAE5B,SAAOH,OAAO3G,IAAI,CAACyG,OAAOvG,UAAS;AACjC,QAAI6G,WAAW,CAAC,GAAGF,YAAY3G,KAAK;AACpC,QAAI8G,KAAK,OAAOP,MAAMO,OAAO,WAAWP,MAAMO,KAAKD,SAASE,KAAK,GAAG;AACpE7C,cACEqC,MAAMvG,UAAU,QAAQ,CAACuG,MAAMS,UAAQ,2CACI;AAE7C9C,cACE,CAAC0C,SAASE,EAAE,GACZ,uCAAqCA,KACnC,kEAAwD;AAG5D,QAAIR,aAAaC,KAAK,GAAG;AACvB,UAAIU,aAAUjC,SAAA,CAAA,GACTuB,OACAG,mBAAmBH,KAAK,GAAC;QAC5BO;OACD;AACDF,eAASE,EAAE,IAAIG;AACf,aAAOA;IACR,OAAM;AACL,UAAIC,oBAAiBlC,SAAA,CAAA,GAChBuB,OACAG,mBAAmBH,KAAK,GAAC;QAC5BO;QACAE,UAAU7G;OACX;AACDyG,eAASE,EAAE,IAAII;AAEf,UAAIX,MAAMS,UAAU;AAClBE,0BAAkBF,WAAWR,0BAC3BD,MAAMS,UACNN,oBACAG,UACAD,QAAQ;MAEX;AAED,aAAOM;IACR;EACH,CAAC;AACH;AAOM,SAAUC,YAGdV,QACAW,aACAC,UAAc;AAAA,MAAdA,aAAQ,QAAA;AAARA,eAAW;EAAG;AAEd,MAAIrG,WACF,OAAOoG,gBAAgB,WAAWtF,UAAUsF,WAAW,IAAIA;AAE7D,MAAIlG,WAAWoG,cAActG,SAASE,YAAY,KAAKmG,QAAQ;AAE/D,MAAInG,YAAY,MAAM;AACpB,WAAO;EACR;AAED,MAAIqG,WAAWC,cAAcf,MAAM;AACnCgB,oBAAkBF,QAAQ;AAE1B,MAAIG,UAAU;AACd,WAASC,IAAI,GAAGD,WAAW,QAAQC,IAAIJ,SAASlH,QAAQ,EAAEsH,GAAG;AAO3D,QAAIC,UAAUC,WAAW3G,QAAQ;AACjCwG,cAAUI,iBAA0CP,SAASI,CAAC,GAAGC,OAAO;EACzE;AAED,SAAOF;AACT;AAUgB,SAAAK,2BACdC,OACAC,YAAqB;AAErB,MAAI;IAAE1B;IAAOrF;IAAUgH;EAAM,IAAKF;AAClC,SAAO;IACLlB,IAAIP,MAAMO;IACV5F;IACAgH;IACAC,MAAMF,WAAW1B,MAAMO,EAAE;IACzBsB,QAAQ7B,MAAM6B;;AAElB;AAmBA,SAASZ,cAGPf,QACAc,UACAc,aACA1B,YAAe;AAAA,MAFfY,aAA2C,QAAA;AAA3CA,eAA2C,CAAA;EAAE;AAAA,MAC7Cc,gBAAA,QAAA;AAAAA,kBAA4C,CAAA;EAAE;AAAA,MAC9C1B,eAAU,QAAA;AAAVA,iBAAa;EAAE;AAEf,MAAI2B,eAAeA,CACjB/B,OACAvG,OACAuI,iBACE;AACF,QAAIC,OAAmC;MACrCD,cACEA,iBAAiBpI,SAAYoG,MAAM1E,QAAQ,KAAK0G;MAClDE,eAAelC,MAAMkC,kBAAkB;MACvCC,eAAe1I;MACfuG;;AAGF,QAAIiC,KAAKD,aAAajF,WAAW,GAAG,GAAG;AACrCY,gBACEsE,KAAKD,aAAajF,WAAWqD,UAAU,GACvC,0BAAwB6B,KAAKD,eAAY,0BAAA,MACnC5B,aAAU,mDAA+C,6DACA;AAGjE6B,WAAKD,eAAeC,KAAKD,aAAavE,MAAM2C,WAAWtG,MAAM;IAC9D;AAED,QAAIwB,OAAO8G,UAAU,CAAChC,YAAY6B,KAAKD,YAAY,CAAC;AACpD,QAAIK,aAAaP,YAAYQ,OAAOL,IAAI;AAKxC,QAAIjC,MAAMS,YAAYT,MAAMS,SAAS3G,SAAS,GAAG;AAC/C6D;;;QAGEqC,MAAMvG,UAAU;QAChB,6DACuC6B,uCAAAA,OAAI;MAAI;AAGjD2F,oBAAcjB,MAAMS,UAAUO,UAAUqB,YAAY/G,IAAI;IACzD;AAID,QAAI0E,MAAM1E,QAAQ,QAAQ,CAAC0E,MAAMvG,OAAO;AACtC;IACD;AAEDuH,aAAStF,KAAK;MACZJ;MACAiH,OAAOC,aAAalH,MAAM0E,MAAMvG,KAAK;MACrC4I;IACD,CAAA;;AAEHnC,SAAOuC,QAAQ,CAACzC,OAAOvG,UAAS;AAAA,QAAAiJ;AAE9B,QAAI1C,MAAM1E,SAAS,MAAM,GAAAoH,cAAC1C,MAAM1E,SAAI,QAAVoH,YAAYC,SAAS,GAAG,IAAG;AACnDZ,mBAAa/B,OAAOvG,KAAK;IAC1B,OAAM;AACL,eAASmJ,YAAYC,wBAAwB7C,MAAM1E,IAAI,GAAG;AACxDyG,qBAAa/B,OAAOvG,OAAOmJ,QAAQ;MACpC;IACF;EACH,CAAC;AAED,SAAO5B;AACT;AAgBA,SAAS6B,wBAAwBvH,MAAY;AAC3C,MAAIwH,WAAWxH,KAAKyH,MAAM,GAAG;AAC7B,MAAID,SAAShJ,WAAW;AAAG,WAAO,CAAA;AAElC,MAAI,CAACkJ,OAAO,GAAGC,IAAI,IAAIH;AAGvB,MAAII,aAAaF,MAAMG,SAAS,GAAG;AAEnC,MAAIC,WAAWJ,MAAMjH,QAAQ,OAAO,EAAE;AAEtC,MAAIkH,KAAKnJ,WAAW,GAAG;AAGrB,WAAOoJ,aAAa,CAACE,UAAU,EAAE,IAAI,CAACA,QAAQ;EAC/C;AAED,MAAIC,eAAeR,wBAAwBI,KAAKzC,KAAK,GAAG,CAAC;AAEzD,MAAI8C,SAAmB,CAAA;AASvBA,SAAO5H,KACL,GAAG2H,aAAa9J,IAAKgK,aACnBA,YAAY,KAAKH,WAAW,CAACA,UAAUG,OAAO,EAAE/C,KAAK,GAAG,CAAC,CAC1D;AAIH,MAAI0C,YAAY;AACdI,WAAO5H,KAAK,GAAG2H,YAAY;EAC5B;AAGD,SAAOC,OAAO/J,IAAKqJ,cACjBtH,KAAKyB,WAAW,GAAG,KAAK6F,aAAa,KAAK,MAAMA,QAAQ;AAE5D;AAEA,SAAS1B,kBAAkBF,UAAuB;AAChDA,WAASwC,KAAK,CAACC,GAAGC,MAChBD,EAAElB,UAAUmB,EAAEnB,QACVmB,EAAEnB,QAAQkB,EAAElB,QACZoB,eACEF,EAAEpB,WAAW9I,IAAK0I,UAASA,KAAKE,aAAa,GAC7CuB,EAAErB,WAAW9I,IAAK0I,UAASA,KAAKE,aAAa,CAAC,CAC/C;AAET;AAEA,IAAMyB,UAAU;AAChB,IAAMC,sBAAsB;AAC5B,IAAMC,kBAAkB;AACxB,IAAMC,oBAAoB;AAC1B,IAAMC,qBAAqB;AAC3B,IAAMC,eAAe;AACrB,IAAMC,UAAWC,OAAcA,MAAM;AAErC,SAAS3B,aAAalH,MAAc7B,OAA0B;AAC5D,MAAIqJ,WAAWxH,KAAKyH,MAAM,GAAG;AAC7B,MAAIqB,eAAetB,SAAShJ;AAC5B,MAAIgJ,SAASuB,KAAKH,OAAO,GAAG;AAC1BE,oBAAgBH;EACjB;AAED,MAAIxK,OAAO;AACT2K,oBAAgBN;EACjB;AAED,SAAOhB,SACJwB,OAAQH,OAAM,CAACD,QAAQC,CAAC,CAAC,EACzBI,OACC,CAAChC,OAAOiC,YACNjC,SACCqB,QAAQa,KAAKD,OAAO,IACjBX,sBACAW,YAAY,KACZT,oBACAC,qBACNI,YAAY;AAElB;AAEA,SAAST,eAAeF,GAAaC,GAAW;AAC9C,MAAIgB,WACFjB,EAAE3J,WAAW4J,EAAE5J,UAAU2J,EAAEhG,MAAM,GAAG,EAAE,EAAEkH,MAAM,CAACzK,GAAGkH,MAAMlH,MAAMwJ,EAAEtC,CAAC,CAAC;AAEpE,SAAOsD;;;;;IAKHjB,EAAEA,EAAE3J,SAAS,CAAC,IAAI4J,EAAEA,EAAE5J,SAAS,CAAC;;;;IAGhC;;AACN;AAEA,SAASyH,iBAIPqD,QACAjK,UAAgB;AAEhB,MAAI;IAAE0H;EAAY,IAAGuC;AAErB,MAAIC,gBAAgB,CAAA;AACpB,MAAIC,kBAAkB;AACtB,MAAI3D,UAA2D,CAAA;AAC/D,WAASC,IAAI,GAAGA,IAAIiB,WAAWvI,QAAQ,EAAEsH,GAAG;AAC1C,QAAIa,OAAOI,WAAWjB,CAAC;AACvB,QAAI2D,MAAM3D,MAAMiB,WAAWvI,SAAS;AACpC,QAAIkL,oBACFF,oBAAoB,MAChBnK,WACAA,SAAS8C,MAAMqH,gBAAgBhL,MAAM,KAAK;AAChD,QAAI2H,QAAQwD,UACV;MAAE3J,MAAM2G,KAAKD;MAAcE,eAAeD,KAAKC;MAAe6C;OAC9DC,iBAAiB;AAGnB,QAAI,CAACvD;AAAO,aAAO;AAEnByD,WAAO1F,OAAOqF,eAAepD,MAAME,MAAM;AAEzC,QAAI3B,QAAQiC,KAAKjC;AAEjBmB,YAAQzF,KAAK;;MAEXiG,QAAQkD;MACRlK,UAAUyH,UAAU,CAAC0C,iBAAiBrD,MAAM9G,QAAQ,CAAC;MACrDwK,cAAcC,kBACZhD,UAAU,CAAC0C,iBAAiBrD,MAAM0D,YAAY,CAAC,CAAC;MAElDnF;IACD,CAAA;AAED,QAAIyB,MAAM0D,iBAAiB,KAAK;AAC9BL,wBAAkB1C,UAAU,CAAC0C,iBAAiBrD,MAAM0D,YAAY,CAAC;IAClE;EACF;AAED,SAAOhE;AACT;SAOgBkE,aACdC,cACA3D,QAEa;AAAA,MAFbA,WAAAA,QAAAA;AAAAA,aAEI,CAAA;EAAS;AAEb,MAAIrG,OAAegK;AACnB,MAAIhK,KAAK6H,SAAS,GAAG,KAAK7H,SAAS,OAAO,CAACA,KAAK6H,SAAS,IAAI,GAAG;AAC9DvI,YACE,OACA,iBAAeU,OACTA,sCAAAA,MAAAA,KAAKS,QAAQ,OAAO,IAAI,IAAsC,uCAAA,sEAE9BT,sCAAAA,KAAKS,QAAQ,OAAO,IAAI,IAAC,KAAI;AAErET,WAAOA,KAAKS,QAAQ,OAAO,IAAI;EAChC;AAGD,QAAMwJ,SAASjK,KAAKyB,WAAW,GAAG,IAAI,MAAM;AAE5C,QAAMhC,YAAayK,OACjBA,KAAK,OAAO,KAAK,OAAOA,MAAM,WAAWA,IAAIC,OAAOD,CAAC;AAEvD,QAAM1C,WAAWxH,KACdyH,MAAM,KAAK,EACXxJ,IAAI,CAACiL,SAAS/K,OAAOiM,UAAS;AAC7B,UAAMC,gBAAgBlM,UAAUiM,MAAM5L,SAAS;AAG/C,QAAI6L,iBAAiBnB,YAAY,KAAK;AACpC,YAAMoB,OAAO;AAEb,aAAO7K,UAAU4G,OAAOiE,IAAI,CAAC;IAC9B;AAED,UAAMC,WAAWrB,QAAQ/C,MAAM,kBAAkB;AACjD,QAAIoE,UAAU;AACZ,YAAM,CAAA,EAAGrL,KAAKsL,QAAQ,IAAID;AAC1B,UAAIE,QAAQpE,OAAOnH,GAAsB;AACzCmD,gBAAUmI,aAAa,OAAOC,SAAS,MAAI,eAAevL,MAAG,SAAS;AACtE,aAAOO,UAAUgL,KAAK;IACvB;AAGD,WAAOvB,QAAQzI,QAAQ,QAAQ,EAAE;GAClC,EAEAuI,OAAQE,aAAY,CAAC,CAACA,OAAO;AAEhC,SAAOe,SAASzC,SAAStC,KAAK,GAAG;AACnC;AAuDgB,SAAAyE,UAIde,SACArL,UAAgB;AAEhB,MAAI,OAAOqL,YAAY,UAAU;AAC/BA,cAAU;MAAE1K,MAAM0K;MAAS9D,eAAe;MAAO6C,KAAK;;EACvD;AAED,MAAI,CAACkB,SAASC,cAAc,IAAIC,YAC9BH,QAAQ1K,MACR0K,QAAQ9D,eACR8D,QAAQjB,GAAG;AAGb,MAAItD,QAAQ9G,SAAS8G,MAAMwE,OAAO;AAClC,MAAI,CAACxE;AAAO,WAAO;AAEnB,MAAIqD,kBAAkBrD,MAAM,CAAC;AAC7B,MAAI0D,eAAeL,gBAAgB/I,QAAQ,WAAW,IAAI;AAC1D,MAAIqK,gBAAgB3E,MAAMhE,MAAM,CAAC;AACjC,MAAIkE,SAAiBuE,eAAe3B,OAClC,CAAC8B,MAAI3H,MAA6BjF,UAAS;AAAA,QAApC;MAAE6M;MAAWpD;QAAYxE;AAG9B,QAAI4H,cAAc,KAAK;AACrB,UAAIC,aAAaH,cAAc3M,KAAK,KAAK;AACzC0L,qBAAeL,gBACZrH,MAAM,GAAGqH,gBAAgBhL,SAASyM,WAAWzM,MAAM,EACnDiC,QAAQ,WAAW,IAAI;IAC3B;AAED,UAAM6B,QAAQwI,cAAc3M,KAAK;AACjC,QAAIyJ,cAAc,CAACtF,OAAO;AACxByI,WAAKC,SAAS,IAAI1M;IACnB,OAAM;AACLyM,WAAKC,SAAS,KAAK1I,SAAS,IAAI7B,QAAQ,QAAQ,GAAG;IACpD;AACD,WAAOsK;KAET,CAAA,CAAE;AAGJ,SAAO;IACL1E;IACAhH,UAAUmK;IACVK;IACAa;;AAEJ;AAIA,SAASG,YACP7K,MACA4G,eACA6C,KAAU;AAAA,MADV7C,kBAAa,QAAA;AAAbA,oBAAgB;EAAK;AAAA,MACrB6C,QAAG,QAAA;AAAHA,UAAM;EAAI;AAEVnK,UACEU,SAAS,OAAO,CAACA,KAAK6H,SAAS,GAAG,KAAK7H,KAAK6H,SAAS,IAAI,GACzD,iBAAe7H,OACTA,sCAAAA,MAAAA,KAAKS,QAAQ,OAAO,IAAI,IAAsC,uCAAA,sEACE,sCAChCT,KAAKS,QAAQ,OAAO,IAAI,IAAC,KAAI;AAGrE,MAAI4F,SAA8B,CAAA;AAClC,MAAI6E,eACF,MACAlL,KACGS,QAAQ,WAAW,EAAE,EACrBA,QAAQ,QAAQ,GAAG,EACnBA,QAAQ,sBAAsB,MAAM,EACpCA,QACC,qBACA,CAAC0K,GAAWH,WAAmBpD,eAAc;AAC3CvB,WAAOjG,KAAK;MAAE4K;MAAWpD,YAAYA,cAAc;IAAI,CAAE;AACzD,WAAOA,aAAa,iBAAiB;EACvC,CAAC;AAGP,MAAI5H,KAAK6H,SAAS,GAAG,GAAG;AACtBxB,WAAOjG,KAAK;MAAE4K,WAAW;IAAK,CAAA;AAC9BE,oBACElL,SAAS,OAAOA,SAAS,OACrB,UACA;aACGyJ,KAAK;AAEdyB,oBAAgB;aACPlL,SAAS,MAAMA,SAAS,KAAK;AAQtCkL,oBAAgB;EACjB;AAAM;AAIP,MAAIP,UAAU,IAAIS,OAAOF,cAActE,gBAAgBtI,SAAY,GAAG;AAEtE,SAAO,CAACqM,SAAStE,MAAM;AACzB;AAEA,SAASL,WAAW1D,OAAa;AAC/B,MAAI;AACF,WAAOA,MACJmF,MAAM,GAAG,EACTxJ,IAAKoN,OAAMC,mBAAmBD,CAAC,EAAE5K,QAAQ,OAAO,KAAK,CAAC,EACtDyE,KAAK,GAAG;WACJnB,OAAO;AACdzE,YACE,OACA,mBAAiBgD,QACgD,6GAAA,eAClDyB,QAAK,KAAI;AAG1B,WAAOzB;EACR;AACH;AAKgB,SAAAmD,cACdpG,UACAmG,UAAgB;AAEhB,MAAIA,aAAa;AAAK,WAAOnG;AAE7B,MAAI,CAACA,SAASkM,YAAW,EAAG9J,WAAW+D,SAAS+F,YAAW,CAAE,GAAG;AAC9D,WAAO;EACR;AAID,MAAIC,aAAahG,SAASqC,SAAS,GAAG,IAClCrC,SAAShH,SAAS,IAClBgH,SAAShH;AACb,MAAIiN,WAAWpM,SAASE,OAAOiM,UAAU;AACzC,MAAIC,YAAYA,aAAa,KAAK;AAEhC,WAAO;EACR;AAED,SAAOpM,SAAS8C,MAAMqJ,UAAU,KAAK;AACvC;SAOgBE,YAAYzM,IAAQ0M,cAAkB;AAAA,MAAlBA,iBAAY,QAAA;AAAZA,mBAAe;EAAG;AACpD,MAAI;IACFtM,UAAUuM;IACV1L,SAAS;IACTC,OAAO;MACL,OAAOlB,OAAO,WAAWgB,UAAUhB,EAAE,IAAIA;AAE7C,MAAII,WAAWuM,aACXA,WAAWnK,WAAW,GAAG,IACvBmK,aACAC,gBAAgBD,YAAYD,YAAY,IAC1CA;AAEJ,SAAO;IACLtM;IACAa,QAAQ4L,gBAAgB5L,MAAM;IAC9BC,MAAM4L,cAAc5L,IAAI;;AAE5B;AAEA,SAAS0L,gBAAgBnF,cAAsBiF,cAAoB;AACjE,MAAInE,WAAWmE,aAAalL,QAAQ,QAAQ,EAAE,EAAEgH,MAAM,GAAG;AACzD,MAAIuE,mBAAmBtF,aAAae,MAAM,GAAG;AAE7CuE,mBAAiB7E,QAAS+B,aAAW;AACnC,QAAIA,YAAY,MAAM;AAEpB,UAAI1B,SAAShJ,SAAS;AAAGgJ,iBAASyE,IAAG;IACtC,WAAU/C,YAAY,KAAK;AAC1B1B,eAASpH,KAAK8I,OAAO;IACtB;EACH,CAAC;AAED,SAAO1B,SAAShJ,SAAS,IAAIgJ,SAAStC,KAAK,GAAG,IAAI;AACpD;AAEA,SAASgH,oBACPC,MACAC,OACAC,MACArM,MAAmB;AAEnB,SACE,uBAAqBmM,OACbC,0CAAAA,SAAAA,QAAK,cAAa5M,KAAKC,UAC7BO,IAAI,IACL,yCACOqM,SAAAA,OAAI,8DACuD;AAEvE;AAyBM,SAAUC,2BAEdzG,SAAY;AACZ,SAAOA,QAAQmD,OACb,CAAC7C,OAAOhI,UACNA,UAAU,KAAMgI,MAAMzB,MAAM1E,QAAQmG,MAAMzB,MAAM1E,KAAKxB,SAAS,CAAE;AAEtE;AAIgB,SAAA+N,oBAEd1G,SAAc2G,sBAA6B;AAC3C,MAAIC,cAAcH,2BAA2BzG,OAAO;AAKpD,MAAI2G,sBAAsB;AACxB,WAAOC,YAAYxO,IAAI,CAACkI,OAAOlD,QAC7BA,QAAQ4C,QAAQrH,SAAS,IAAI2H,MAAM9G,WAAW8G,MAAM0D,YAAY;EAEnE;AAED,SAAO4C,YAAYxO,IAAKkI,WAAUA,MAAM0D,YAAY;AACtD;AAKM,SAAU6C,UACdC,OACAC,gBACAC,kBACAC,gBAAsB;AAAA,MAAtBA,mBAAc,QAAA;AAAdA,qBAAiB;EAAK;AAEtB,MAAI7N;AACJ,MAAI,OAAO0N,UAAU,UAAU;AAC7B1N,SAAKgB,UAAU0M,KAAK;EACrB,OAAM;AACL1N,SAAEkE,SAAQwJ,CAAAA,GAAAA,KAAK;AAEftK,cACE,CAACpD,GAAGI,YAAY,CAACJ,GAAGI,SAASgI,SAAS,GAAG,GACzC6E,oBAAoB,KAAK,YAAY,UAAUjN,EAAE,CAAC;AAEpDoD,cACE,CAACpD,GAAGI,YAAY,CAACJ,GAAGI,SAASgI,SAAS,GAAG,GACzC6E,oBAAoB,KAAK,YAAY,QAAQjN,EAAE,CAAC;AAElDoD,cACE,CAACpD,GAAGiB,UAAU,CAACjB,GAAGiB,OAAOmH,SAAS,GAAG,GACrC6E,oBAAoB,KAAK,UAAU,QAAQjN,EAAE,CAAC;EAEjD;AAED,MAAI8N,cAAcJ,UAAU,MAAM1N,GAAGI,aAAa;AAClD,MAAIuM,aAAamB,cAAc,MAAM9N,GAAGI;AAExC,MAAI2N;AAWJ,MAAIpB,cAAc,MAAM;AACtBoB,WAAOH;EACR,OAAM;AACL,QAAII,qBAAqBL,eAAepO,SAAS;AAMjD,QAAI,CAACsO,kBAAkBlB,WAAWnK,WAAW,IAAI,GAAG;AAClD,UAAIyL,aAAatB,WAAWnE,MAAM,GAAG;AAErC,aAAOyF,WAAW,CAAC,MAAM,MAAM;AAC7BA,mBAAWC,MAAK;AAChBF,8BAAsB;MACvB;AAEDhO,SAAGI,WAAW6N,WAAWhI,KAAK,GAAG;IAClC;AAED8H,WAAOC,sBAAsB,IAAIL,eAAeK,kBAAkB,IAAI;EACvE;AAED,MAAIjN,OAAO0L,YAAYzM,IAAI+N,IAAI;AAG/B,MAAII,2BACFxB,cAAcA,eAAe,OAAOA,WAAW/D,SAAS,GAAG;AAE7D,MAAIwF,2BACDN,eAAenB,eAAe,QAAQiB,iBAAiBhF,SAAS,GAAG;AACtE,MACE,CAAC7H,KAAKX,SAASwI,SAAS,GAAG,MAC1BuF,4BAA4BC,0BAC7B;AACArN,SAAKX,YAAY;EAClB;AAED,SAAOW;AACT;AAKM,SAAUsN,cAAcrO,IAAM;AAElC,SAAOA,OAAO,MAAOA,GAAYI,aAAa,KAC1C,MACA,OAAOJ,OAAO,WACdgB,UAAUhB,EAAE,EAAEI,WACdJ,GAAGI;AACT;IAKayH,YAAayG,WACxBA,MAAMrI,KAAK,GAAG,EAAEzE,QAAQ,UAAU,GAAG;IAK1BqJ,oBAAqBzK,cAChCA,SAASoB,QAAQ,QAAQ,EAAE,EAAEA,QAAQ,QAAQ,GAAG;AAK3C,IAAMqL,kBAAmB5L,YAC9B,CAACA,UAAUA,WAAW,MAClB,KACAA,OAAOuB,WAAW,GAAG,IACrBvB,SACA,MAAMA;AAKL,IAAM6L,gBAAiB5L,UAC5B,CAACA,QAAQA,SAAS,MAAM,KAAKA,KAAKsB,WAAW,GAAG,IAAItB,OAAO,MAAMA;AAW5D,IAAMqN,OAAqB,SAArBA,MAAsBlH,MAAMmH,MAAa;AAAA,MAAbA,SAAI,QAAA;AAAJA,WAAO,CAAA;EAAE;AAChD,MAAIC,eAAe,OAAOD,SAAS,WAAW;IAAEE,QAAQF;EAAI,IAAKA;AAEjE,MAAIG,UAAU,IAAIC,QAAQH,aAAaE,OAAO;AAC9C,MAAI,CAACA,QAAQE,IAAI,cAAc,GAAG;AAChCF,YAAQG,IAAI,gBAAgB,iCAAiC;EAC9D;AAED,SAAO,IAAIC,SAASxO,KAAKC,UAAU6G,IAAI,GAACnD,SAAA,CAAA,GACnCuK,cAAY;IACfE;EAAO,CAAA,CACR;AACH;AAQM,IAAOK,uBAAP,cAAoCzL,MAAK;AAAA;IAElC0L,qBAAY;EAWvBC,YAAY7H,MAA+BoH,cAA2B;AAV9D,SAAAU,iBAA8B,oBAAI5J,IAAG;AAIrC,SAAA6J,cACN,oBAAI7J,IAAG;AAGT,SAAY8J,eAAa,CAAA;AAGvBjM,cACEiE,QAAQ,OAAOA,SAAS,YAAY,CAACiI,MAAMC,QAAQlI,IAAI,GACvD,oCAAoC;AAKtC,QAAImI;AACJ,SAAKC,eAAe,IAAIC,QAAQ,CAACxD,GAAGyD,MAAOH,SAASG,CAAE;AACtD,SAAKC,aAAa,IAAIC,gBAAe;AACrC,QAAIC,UAAUA,MACZN,OAAO,IAAIR,qBAAqB,uBAAuB,CAAC;AAC1D,SAAKe,sBAAsB,MACzB,KAAKH,WAAWI,OAAO5K,oBAAoB,SAAS0K,OAAO;AAC7D,SAAKF,WAAWI,OAAO7K,iBAAiB,SAAS2K,OAAO;AAExD,SAAKzI,OAAOsD,OAAO5L,QAAQsI,IAAI,EAAE2C,OAC/B,CAACiG,KAAGC,UAAA;AAAA,UAAE,CAACjQ,KAAKoD,KAAK,IAAC6M;AAAA,aAChBvF,OAAO1F,OAAOgL,KAAK;QACjB,CAAChQ,GAAG,GAAG,KAAKkQ,aAAalQ,KAAKoD,KAAK;OACpC;OACH,CAAA,CAAE;AAGJ,QAAI,KAAK+M,MAAM;AAEb,WAAKL,oBAAmB;IACzB;AAED,SAAKvB,OAAOC;EACd;EAEQ0B,aACNlQ,KACAoD,OAAiC;AAEjC,QAAI,EAAEA,iBAAiBqM,UAAU;AAC/B,aAAOrM;IACR;AAED,SAAKgM,aAAalO,KAAKlB,GAAG;AAC1B,SAAKkP,eAAekB,IAAIpQ,GAAG;AAI3B,QAAIqQ,UAA0BZ,QAAQa,KAAK,CAAClN,OAAO,KAAKoM,YAAY,CAAC,EAAEe,KACpEnJ,UAAS,KAAKoJ,SAASH,SAASrQ,KAAKZ,QAAWgI,IAAe,GAC/DvC,WAAU,KAAK2L,SAASH,SAASrQ,KAAK6E,KAAgB,CAAC;AAK1DwL,YAAQI,MAAM,MAAO;IAAA,CAAC;AAEtB/F,WAAOgG,eAAeL,SAAS,YAAY;MAAEM,KAAKA,MAAM;IAAI,CAAE;AAC9D,WAAON;EACT;EAEQG,SACNH,SACArQ,KACA6E,OACAuC,MAAc;AAEd,QACE,KAAKuI,WAAWI,OAAOa,WACvB/L,iBAAiBkK,sBACjB;AACA,WAAKe,oBAAmB;AACxBpF,aAAOgG,eAAeL,SAAS,UAAU;QAAEM,KAAKA,MAAM9L;MAAK,CAAE;AAC7D,aAAO4K,QAAQF,OAAO1K,KAAK;IAC5B;AAED,SAAKqK,eAAe2B,OAAO7Q,GAAG;AAE9B,QAAI,KAAKmQ,MAAM;AAEb,WAAKL,oBAAmB;IACzB;AAID,QAAIjL,UAAUzF,UAAagI,SAAShI,QAAW;AAC7C,UAAI0R,iBAAiB,IAAIxN,MACvB,4BAA0BtD,MAAG,uFACwB;AAEvD0K,aAAOgG,eAAeL,SAAS,UAAU;QAAEM,KAAKA,MAAMG;MAAc,CAAE;AACtE,WAAKC,KAAK,OAAO/Q,GAAG;AACpB,aAAOyP,QAAQF,OAAOuB,cAAc;IACrC;AAED,QAAI1J,SAAShI,QAAW;AACtBsL,aAAOgG,eAAeL,SAAS,UAAU;QAAEM,KAAKA,MAAM9L;MAAK,CAAE;AAC7D,WAAKkM,KAAK,OAAO/Q,GAAG;AACpB,aAAOyP,QAAQF,OAAO1K,KAAK;IAC5B;AAED6F,WAAOgG,eAAeL,SAAS,SAAS;MAAEM,KAAKA,MAAMvJ;IAAI,CAAE;AAC3D,SAAK2J,KAAK,OAAO/Q,GAAG;AACpB,WAAOoH;EACT;EAEQ2J,KAAKH,SAAkBI,YAAmB;AAChD,SAAK7B,YAAYlH,QAASgJ,gBAAeA,WAAWL,SAASI,UAAU,CAAC;EAC1E;EAEAE,UAAUtP,IAAmD;AAC3D,SAAKuN,YAAYiB,IAAIxO,EAAE;AACvB,WAAO,MAAM,KAAKuN,YAAY0B,OAAOjP,EAAE;EACzC;EAEAuP,SAAM;AACJ,SAAKxB,WAAWyB,MAAK;AACrB,SAAKlC,eAAejH,QAAQ,CAACkE,GAAGkF,MAAM,KAAKnC,eAAe2B,OAAOQ,CAAC,CAAC;AACnE,SAAKN,KAAK,IAAI;EAChB;EAEA,MAAMO,YAAYvB,QAAmB;AACnC,QAAIa,UAAU;AACd,QAAI,CAAC,KAAKT,MAAM;AACd,UAAIN,UAAUA,MAAM,KAAKsB,OAAM;AAC/BpB,aAAO7K,iBAAiB,SAAS2K,OAAO;AACxCe,gBAAU,MAAM,IAAInB,QAAS8B,aAAW;AACtC,aAAKL,UAAWN,CAAAA,aAAW;AACzBb,iBAAO5K,oBAAoB,SAAS0K,OAAO;AAC3C,cAAIe,YAAW,KAAKT,MAAM;AACxBoB,oBAAQX,QAAO;UAChB;QACH,CAAC;MACH,CAAC;IACF;AACD,WAAOA;EACT;EAEA,IAAIT,OAAI;AACN,WAAO,KAAKjB,eAAesC,SAAS;EACtC;EAEA,IAAIC,gBAAa;AACftO,cACE,KAAKiE,SAAS,QAAQ,KAAK+I,MAC3B,2DAA2D;AAG7D,WAAOzF,OAAO5L,QAAQ,KAAKsI,IAAI,EAAE2C,OAC/B,CAACiG,KAAG0B,UAAA;AAAA,UAAE,CAAC1R,KAAKoD,KAAK,IAACsO;AAAA,aAChBhH,OAAO1F,OAAOgL,KAAK;QACjB,CAAChQ,GAAG,GAAG2R,qBAAqBvO,KAAK;OAClC;OACH,CAAA,CAAE;EAEN;EAEA,IAAIwO,cAAW;AACb,WAAOvC,MAAMvB,KAAK,KAAKoB,cAAc;EACvC;AACD;AAED,SAAS2C,iBAAiBzO,OAAU;AAClC,SACEA,iBAAiBqM,WAAYrM,MAAyB0O,aAAa;AAEvE;AAEA,SAASH,qBAAqBvO,OAAU;AACtC,MAAI,CAACyO,iBAAiBzO,KAAK,GAAG;AAC5B,WAAOA;EACR;AAED,MAAIA,MAAM2O,QAAQ;AAChB,UAAM3O,MAAM2O;EACb;AACD,SAAO3O,MAAM4O;AACf;AAOO,IAAMC,QAAuB,SAAvBA,OAAwB7K,MAAMmH,MAAa;AAAA,MAAbA,SAAI,QAAA;AAAJA,WAAO,CAAA;EAAE;AAClD,MAAIC,eAAe,OAAOD,SAAS,WAAW;IAAEE,QAAQF;EAAI,IAAKA;AAEjE,SAAO,IAAIS,aAAa5H,MAAMoH,YAAY;AAC5C;AAWO,IAAM0D,WAA6B,SAA7BA,UAA8BpP,KAAKyL,MAAc;AAAA,MAAdA,SAAI,QAAA;AAAJA,WAAO;EAAG;AACxD,MAAIC,eAAeD;AACnB,MAAI,OAAOC,iBAAiB,UAAU;AACpCA,mBAAe;MAAEC,QAAQD;;aAChB,OAAOA,aAAaC,WAAW,aAAa;AACrDD,iBAAaC,SAAS;EACvB;AAED,MAAIC,UAAU,IAAIC,QAAQH,aAAaE,OAAO;AAC9CA,UAAQG,IAAI,YAAY/L,GAAG;AAE3B,SAAO,IAAIgM,SAAS,MAAI7K,SAAA,CAAA,GACnBuK,cAAY;IACfE;EAAO,CAAA,CACR;AACH;IAOayD,mBAAqCA,CAACrP,KAAKyL,SAAQ;AAC9D,MAAI6D,WAAWF,SAASpP,KAAKyL,IAAI;AACjC6D,WAAS1D,QAAQG,IAAI,2BAA2B,MAAM;AACtD,SAAOuD;AACT;IAgBaC,0BAAiB;EAO5BpD,YACER,QACA6D,YACAlL,MACAmL,UAAgB;AAAA,QAAhBA,aAAQ,QAAA;AAARA,iBAAW;IAAK;AAEhB,SAAK9D,SAASA;AACd,SAAK6D,aAAaA,cAAc;AAChC,SAAKC,WAAWA;AAChB,QAAInL,gBAAgB9D,OAAO;AACzB,WAAK8D,OAAOA,KAAKvD,SAAQ;AACzB,WAAKgB,QAAQuC;IACd,OAAM;AACL,WAAKA,OAAOA;IACb;EACH;AACD;AAMK,SAAUoL,qBAAqB3N,OAAU;AAC7C,SACEA,SAAS,QACT,OAAOA,MAAM4J,WAAW,YACxB,OAAO5J,MAAMyN,eAAe,YAC5B,OAAOzN,MAAM0N,aAAa,aAC1B,UAAU1N;AAEd;AC/7BA,IAAM4N,0BAAgD,CACpD,QACA,OACA,SACA,QAAQ;AAEV,IAAMC,uBAAuB,IAAIpN,IAC/BmN,uBAAuB;AAGzB,IAAME,yBAAuC,CAC3C,OACA,GAAGF,uBAAuB;AAE5B,IAAMG,sBAAsB,IAAItN,IAAgBqN,sBAAsB;AAEtE,IAAME,sBAAsB,oBAAIvN,IAAI,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AAC7D,IAAMwN,oCAAoC,oBAAIxN,IAAI,CAAC,KAAK,GAAG,CAAC;AAErD,IAAMyN,kBAA4C;EACvD5T,OAAO;EACPc,UAAUb;EACV4T,YAAY5T;EACZ6T,YAAY7T;EACZ8T,aAAa9T;EACb+T,UAAU/T;EACVkP,MAAMlP;EACNgU,MAAMhU;;AAGD,IAAMiU,eAAsC;EACjDlU,OAAO;EACPiI,MAAMhI;EACN4T,YAAY5T;EACZ6T,YAAY7T;EACZ8T,aAAa9T;EACb+T,UAAU/T;EACVkP,MAAMlP;EACNgU,MAAMhU;;AAGD,IAAMkU,eAAiC;EAC5CnU,OAAO;EACPoU,SAASnU;EACToU,OAAOpU;EACPa,UAAUb;;AAGZ,IAAMqU,qBAAqB;AAE3B,IAAMC,4BAAyDlO,YAAW;EACxEmO,kBAAkBC,QAAQpO,MAAMmO,gBAAgB;AACjD;AAED,IAAME,0BAA0B;AAW1B,SAAUC,aAAavF,MAAgB;AAC3C,QAAMwF,eAAexF,KAAKxM,SACtBwM,KAAKxM,SACL,OAAOA,WAAW,cAClBA,SACA3C;AACJ,QAAM4U,YACJ,OAAOD,iBAAiB,eACxB,OAAOA,aAAarR,aAAa,eACjC,OAAOqR,aAAarR,SAASuR,kBAAkB;AACjD,QAAMC,WAAW,CAACF;AAElB7Q,YACEoL,KAAK7I,OAAOpG,SAAS,GACrB,2DAA2D;AAG7D,MAAIqG;AACJ,MAAI4I,KAAK5I,oBAAoB;AAC3BA,yBAAqB4I,KAAK5I;EAC3B,WAAU4I,KAAK4F,qBAAqB;AAEnC,QAAIA,sBAAsB5F,KAAK4F;AAC/BxO,yBAAsBH,YAAW;MAC/BmO,kBAAkBQ,oBAAoB3O,KAAK;IAC5C;EACF,OAAM;AACLG,yBAAqB+N;EACtB;AAGD,MAAI7N,WAA0B,CAAA;AAE9B,MAAIuO,aAAa3O,0BACf8I,KAAK7I,QACLC,oBACAvG,QACAyG,QAAQ;AAEV,MAAIwO;AACJ,MAAI/N,WAAWiI,KAAKjI,YAAY;AAChC,MAAIgO,mBAAmB/F,KAAKgG,yBAAyBC;AAErD,MAAIC,SAAMxQ,SAAA;IACRyQ,mBAAmB;IACnBC,wBAAwB;IACxBC,qBAAqB;IACrBC,oBAAoB;IACpBvH,sBAAsB;IACtBwH,sCAAsC;KACnCvG,KAAKkG,MAAM;AAGhB,MAAIM,kBAAuC;AAE3C,MAAI5F,cAAc,oBAAI7J,IAAG;AAEzB,MAAI0P,uBAAsD;AAE1D,MAAIC,0BAAkE;AAEtE,MAAIC,oBAAsD;AAO1D,MAAIC,wBAAwB5G,KAAK6G,iBAAiB;AAElD,MAAIC,iBAAiBjP,YAAYgO,YAAY7F,KAAK7N,QAAQT,UAAUqG,QAAQ;AAC5E,MAAIgP,gBAAkC;AAEtC,MAAID,kBAAkB,MAAM;AAG1B,QAAIxQ,QAAQ0Q,uBAAuB,KAAK;MACtCpV,UAAUoO,KAAK7N,QAAQT,SAASE;IACjC,CAAA;AACD,QAAI;MAAEwG;MAASnB;IAAK,IAAKgQ,uBAAuBpB,UAAU;AAC1DiB,qBAAiB1O;AACjB2O,oBAAgB;MAAE,CAAC9P,MAAMO,EAAE,GAAGlB;;EAC/B;AAED,MAAI4Q;AACJ,MAAIC,gBAAgBL,eAAexL,KAAM8L,OAAMA,EAAEnQ,MAAMoQ,IAAI;AAC3D,MAAIC,aAAaR,eAAexL,KAAM8L,OAAMA,EAAEnQ,MAAMsQ,MAAM;AAC1D,MAAIJ,eAAe;AAGjBD,kBAAc;EACf,WAAU,CAACI,YAAY;AAEtBJ,kBAAc;EACf,WAAUhB,OAAOG,qBAAqB;AAIrC,QAAI1N,aAAaqH,KAAK6G,gBAAgB7G,KAAK6G,cAAclO,aAAa;AACtE,QAAI6O,SAASxH,KAAK6G,gBAAgB7G,KAAK6G,cAAcW,SAAS;AAC9D,QAAIC,qBAAsBL,OAA6B;AAErD,UAAI,CAACA,EAAEnQ,MAAMsQ,QAAQ;AACnB,eAAO;MACR;AAED,UACE,OAAOH,EAAEnQ,MAAMsQ,WAAW,cAC1BH,EAAEnQ,MAAMsQ,OAAOG,YAAY,MAC3B;AACA,eAAO;MACR;AAED,aACG/O,cAAcA,WAAWyO,EAAEnQ,MAAMO,EAAE,MAAM3G,UACzC2W,UAAUA,OAAOJ,EAAEnQ,MAAMO,EAAE,MAAM3G;;AAKtC,QAAI2W,QAAQ;AACV,UAAIhS,MAAMsR,eAAea,UACtBP,OAAMI,OAAQJ,EAAEnQ,MAAMO,EAAE,MAAM3G,MAAS;AAE1CqW,oBAAcJ,eAAepS,MAAM,GAAGc,MAAM,CAAC,EAAEoG,MAAM6L,kBAAkB;IACxE,OAAM;AACLP,oBAAcJ,eAAelL,MAAM6L,kBAAkB;IACtD;EACF,OAAM;AAGLP,kBAAclH,KAAK6G,iBAAiB;EACrC;AAED,MAAIe;AACJ,MAAIhX,QAAqB;IACvBiX,eAAe7H,KAAK7N,QAAQnB;IAC5BU,UAAUsO,KAAK7N,QAAQT;IACvB0G,SAAS0O;IACTI;IACAY,YAAYtD;;IAEZuD,uBAAuB/H,KAAK6G,iBAAiB,OAAO,QAAQ;IAC5DmB,oBAAoB;IACpBC,cAAc;IACdtP,YAAaqH,KAAK6G,iBAAiB7G,KAAK6G,cAAclO,cAAe,CAAA;IACrEuP,YAAalI,KAAK6G,iBAAiB7G,KAAK6G,cAAcqB,cAAe;IACrEV,QAASxH,KAAK6G,iBAAiB7G,KAAK6G,cAAcW,UAAWT;IAC7DoB,UAAU,oBAAIC,IAAG;IACjBC,UAAU,oBAAID,IAAG;;AAKnB,MAAIE,gBAA+BC,OAActX;AAIjD,MAAIuX,4BAA4B;AAGhC,MAAIC;AAGJ,MAAIC,+BAA+B;AAGnC,MAAIC,yBAAmD,oBAAIP,IAAG;AAM9D,MAAIQ,8BAAmD;AAIvD,MAAIC,8BAA8B;AAMlC,MAAIC,yBAAyB;AAI7B,MAAIC,0BAAoC,CAAA;AAIxC,MAAIC,wBAAkC,CAAA;AAGtC,MAAIC,mBAAmB,oBAAIb,IAAG;AAG9B,MAAIc,qBAAqB;AAKzB,MAAIC,0BAA0B;AAG9B,MAAIC,iBAAiB,oBAAIhB,IAAG;AAG5B,MAAIiB,mBAAmB,oBAAItS,IAAG;AAG9B,MAAIuS,mBAAmB,oBAAIlB,IAAG;AAG9B,MAAImB,iBAAiB,oBAAInB,IAAG;AAI5B,MAAIoB,kBAAkB,oBAAIzS,IAAG;AAM7B,MAAI0S,kBAAkB,oBAAIrB,IAAG;AAI7B,MAAIsB,mBAAmB,oBAAItB,IAAG;AAI9B,MAAIuB,0BAA0B;AAK9B,WAASC,aAAU;AAGjBpD,sBAAkBxG,KAAK7N,QAAQiB,OAC7BuC,UAA+C;AAAA,UAA9C;QAAE3E,QAAQ6W;QAAenW;QAAUqB;MAAK,IAAE4C;AAGzC,UAAIgU,yBAAyB;AAC3BA,kCAA0B;AAC1B;MACD;AAED9X,cACE6X,iBAAiBzG,SAAS,KAAKlQ,SAAS,MACxC,4YAK2D;AAG7D,UAAI8W,aAAaC,sBAAsB;QACrCC,iBAAiBnZ,MAAMc;QACvBmB,cAAcnB;QACdmW;MACD,CAAA;AAED,UAAIgC,cAAc9W,SAAS,MAAM;AAE/B4W,kCAA0B;AAC1B3J,aAAK7N,QAAQe,GAAGH,QAAQ,EAAE;AAG1BiX,sBAAcH,YAAY;UACxBjZ,OAAO;UACPc;UACAsT,UAAO;AACLgF,0BAAcH,YAAa;cACzBjZ,OAAO;cACPoU,SAASnU;cACToU,OAAOpU;cACPa;YACD,CAAA;AAEDsO,iBAAK7N,QAAQe,GAAGH,KAAK;;UAEvBkS,QAAK;AACH,gBAAIoD,WAAW,IAAID,IAAIxX,MAAMyX,QAAQ;AACrCA,qBAAS/H,IAAIuJ,YAAa9E,YAAY;AACtCkF,wBAAY;cAAE5B;YAAQ,CAAE;UAC1B;QACD,CAAA;AACD;MACD;AAED,aAAO6B,gBAAgBrC,eAAenW,QAAQ;IAChD,CAAC;AAGH,QAAI+T,WAAW;AAGb0E,gCAA0B3E,cAAcmD,sBAAsB;AAC9D,UAAIyB,0BAA0BA,MAC5BC,0BAA0B7E,cAAcmD,sBAAsB;AAChEnD,mBAAa7O,iBAAiB,YAAYyT,uBAAuB;AACjExB,oCAA8BA,MAC5BpD,aAAa5O,oBAAoB,YAAYwT,uBAAuB;IACvE;AAOD,QAAI,CAACxZ,MAAMsW,aAAa;AACtBgD,sBAAgB3B,OAActX,KAAKL,MAAMc,UAAU;QACjD4Y,kBAAkB;MACnB,CAAA;IACF;AAED,WAAO1C;EACT;AAGA,WAAS2C,UAAO;AACd,QAAI/D,iBAAiB;AACnBA,sBAAe;IAChB;AACD,QAAIoC,6BAA6B;AAC/BA,kCAA2B;IAC5B;AACDhI,gBAAY4J,MAAK;AACjB/B,mCAA+BA,4BAA4B5F,MAAK;AAChEjS,UAAMuX,SAASzO,QAAQ,CAACgE,GAAGjM,QAAQgZ,cAAchZ,GAAG,CAAC;AACrDb,UAAMyX,SAAS3O,QAAQ,CAACgE,GAAGjM,QAAQiZ,cAAcjZ,GAAG,CAAC;EACvD;AAGA,WAASkR,UAAUtP,IAAoB;AACrCuN,gBAAYiB,IAAIxO,EAAE;AAClB,WAAO,MAAMuN,YAAY0B,OAAOjP,EAAE;EACpC;AAGA,WAAS4W,YACPU,UACAC,MAGM;AAAA,QAHNA,SAAAA,QAAAA;AAAAA,aAGI,CAAA;IAAE;AAENha,YAAK8E,SAAA,CAAA,GACA9E,OACA+Z,QAAQ;AAKb,QAAIE,oBAA8B,CAAA;AAClC,QAAIC,sBAAgC,CAAA;AAEpC,QAAI5E,OAAOC,mBAAmB;AAC5BvV,YAAMuX,SAASzO,QAAQ,CAACqR,SAAStZ,QAAO;AACtC,YAAIsZ,QAAQna,UAAU,QAAQ;AAC5B,cAAI4Y,gBAAgBnJ,IAAI5O,GAAG,GAAG;AAE5BqZ,gCAAoBnY,KAAKlB,GAAG;UAC7B,OAAM;AAGLoZ,8BAAkBlY,KAAKlB,GAAG;UAC3B;QACF;MACH,CAAC;IACF;AAKD,KAAC,GAAGmP,WAAW,EAAElH,QAASgJ,gBACxBA,WAAW9R,OAAO;MAChB4Y,iBAAiBsB;MACjBE,6BAA6BJ,KAAKK;MAClCC,oBAAoBN,KAAKO,cAAc;IACxC,CAAA,CAAC;AAIJ,QAAIjF,OAAOC,mBAAmB;AAC5B0E,wBAAkBnR,QAASjI,SAAQb,MAAMuX,SAAS7F,OAAO7Q,GAAG,CAAC;AAC7DqZ,0BAAoBpR,QAASjI,SAAQgZ,cAAchZ,GAAG,CAAC;IACxD;EACH;AAOA,WAAS2Z,mBACP1Z,UACAiZ,UAA0EU,OAC/B;AAAA,QAAAC,iBAAAC;AAAA,QAA3C;MAAEJ;IAAS,IAAAE,UAAA,SAA8B,CAAA,IAAEA;AAO3C,QAAIG,iBACF5a,MAAMsX,cAAc,QACpBtX,MAAMkX,WAAWrD,cAAc,QAC/BgH,iBAAiB7a,MAAMkX,WAAWrD,UAAU,KAC5C7T,MAAMkX,WAAWlX,UAAU,eAC3B0a,kBAAA5Z,SAASd,UAAK,OAAA,SAAd0a,gBAAgBI,iBAAgB;AAElC,QAAIxD;AACJ,QAAIyC,SAASzC,YAAY;AACvB,UAAI/L,OAAOwP,KAAKhB,SAASzC,UAAU,EAAEnX,SAAS,GAAG;AAC/CmX,qBAAayC,SAASzC;MACvB,OAAM;AAELA,qBAAa;MACd;eACQsD,gBAAgB;AAEzBtD,mBAAatX,MAAMsX;IACpB,OAAM;AAELA,mBAAa;IACd;AAGD,QAAIvP,aAAagS,SAAShS,aACtBiT,gBACEhb,MAAM+H,YACNgS,SAAShS,YACTgS,SAASvS,WAAW,CAAA,GACpBuS,SAASnD,MAAM,IAEjB5W,MAAM+H;AAIV,QAAI0P,WAAWzX,MAAMyX;AACrB,QAAIA,SAASpF,OAAO,GAAG;AACrBoF,iBAAW,IAAID,IAAIC,QAAQ;AAC3BA,eAAS3O,QAAQ,CAACgE,GAAGoF,MAAMuF,SAAS/H,IAAIwC,GAAGiC,YAAY,CAAC;IACzD;AAID,QAAIiD,qBACFQ,8BAA8B,QAC7B5X,MAAMkX,WAAWrD,cAAc,QAC9BgH,iBAAiB7a,MAAMkX,WAAWrD,UAAU,OAC5C8G,mBAAA7Z,SAASd,UAAT2a,OAAAA,SAAAA,iBAAgBG,iBAAgB;AAEpC,QAAI5F,oBAAoB;AACtBD,mBAAaC;AACbA,2BAAqBjV;IACtB;AAED,QAAIgY;AAA6B;aAEtBP,kBAAkBC,OAActX;AAAK;aAErCqX,kBAAkBC,OAAc3V,MAAM;AAC/CoN,WAAK7N,QAAQQ,KAAKjB,UAAUA,SAASd,KAAK;IAC3C,WAAU0X,kBAAkBC,OAActV,SAAS;AAClD+M,WAAK7N,QAAQa,QAAQtB,UAAUA,SAASd,KAAK;IAC9C;AAED,QAAIqa;AAGJ,QAAI3C,kBAAkBC,OAActX,KAAK;AAEvC,UAAI4a,aAAalD,uBAAuBvG,IAAIxR,MAAMc,SAASE,QAAQ;AACnE,UAAIia,cAAcA,WAAWxL,IAAI3O,SAASE,QAAQ,GAAG;AACnDqZ,6BAAqB;UACnBlB,iBAAiBnZ,MAAMc;UACvBmB,cAAcnB;;iBAEPiX,uBAAuBtI,IAAI3O,SAASE,QAAQ,GAAG;AAGxDqZ,6BAAqB;UACnBlB,iBAAiBrY;UACjBmB,cAAcjC,MAAMc;;MAEvB;eACQgX,8BAA8B;AAEvC,UAAIoD,UAAUnD,uBAAuBvG,IAAIxR,MAAMc,SAASE,QAAQ;AAChE,UAAIka,SAAS;AACXA,gBAAQjK,IAAInQ,SAASE,QAAQ;MAC9B,OAAM;AACLka,kBAAU,oBAAI/U,IAAY,CAACrF,SAASE,QAAQ,CAAC;AAC7C+W,+BAAuBrI,IAAI1P,MAAMc,SAASE,UAAUka,OAAO;MAC5D;AACDb,2BAAqB;QACnBlB,iBAAiBnZ,MAAMc;QACvBmB,cAAcnB;;IAEjB;AAEDuY,gBAAWvU,SAAA,CAAA,GAEJiV,UAAQ;MACXzC;MACAvP;MACAkP,eAAeS;MACf5W;MACAwV,aAAa;MACbY,YAAYtD;MACZyD,cAAc;MACdF,uBAAuBgE,uBACrBra,UACAiZ,SAASvS,WAAWxH,MAAMwH,OAAO;MAEnC4P;MACAK;KAEF,GAAA;MACE4C;MACAE,WAAWA,cAAc;IAC1B,CAAA;AAIH7C,oBAAgBC,OAActX;AAC9BuX,gCAA4B;AAC5BE,mCAA+B;AAC/BG,kCAA8B;AAC9BC,6BAAyB;AACzBC,8BAA0B,CAAA;AAC1BC,4BAAwB,CAAA;EAC1B;AAIA,iBAAegD,SACbxa,IACAoZ,MAA4B;AAE5B,QAAI,OAAOpZ,OAAO,UAAU;AAC1BwO,WAAK7N,QAAQe,GAAG1B,EAAE;AAClB;IACD;AAED,QAAIya,iBAAiBC,YACnBtb,MAAMc,UACNd,MAAMwH,SACNL,UACAmO,OAAOI,oBACP9U,IACA0U,OAAOnH,sBACP6L,QAAAA,OAAAA,SAAAA,KAAMuB,aACNvB,QAAI,OAAA,SAAJA,KAAMwB,QAAQ;AAEhB,QAAI;MAAE7Z;MAAM8Z;MAAY/V;IAAK,IAAKgW,yBAChCpG,OAAOE,wBACP,OACA6F,gBACArB,IAAI;AAGN,QAAIb,kBAAkBnZ,MAAMc;AAC5B,QAAImB,eAAelB,eAAef,MAAMc,UAAUa,MAAMqY,QAAQA,KAAKha,KAAK;AAO1EiC,mBAAY6C,SACP7C,CAAAA,GAAAA,cACAmN,KAAK7N,QAAQG,eAAeO,YAAY,CAAC;AAG9C,QAAI0Z,cAAc3B,QAAQA,KAAK5X,WAAW,OAAO4X,KAAK5X,UAAUnC;AAEhE,QAAIgX,gBAAgBU,OAAc3V;AAElC,QAAI2Z,gBAAgB,MAAM;AACxB1E,sBAAgBU,OAActV;IAC/B,WAAUsZ,gBAAgB;AAAO;aAGhCF,cAAc,QACdZ,iBAAiBY,WAAW5H,UAAU,KACtC4H,WAAW3H,eAAe9T,MAAMc,SAASE,WAAWhB,MAAMc,SAASe,QACnE;AAKAoV,sBAAgBU,OAActV;IAC/B;AAED,QAAI+U,qBACF4C,QAAQ,wBAAwBA,OAC5BA,KAAK5C,uBAAuB,OAC5BnX;AAEN,QAAIsa,aAAaP,QAAQA,KAAKM,wBAAwB;AAEtD,QAAIrB,aAAaC,sBAAsB;MACrCC;MACAlX;MACAgV;IACD,CAAA;AAED,QAAIgC,YAAY;AAEdG,oBAAcH,YAAY;QACxBjZ,OAAO;QACPc,UAAUmB;QACVmS,UAAO;AACLgF,wBAAcH,YAAa;YACzBjZ,OAAO;YACPoU,SAASnU;YACToU,OAAOpU;YACPa,UAAUmB;UACX,CAAA;AAEDmZ,mBAASxa,IAAIoZ,IAAI;;QAEnB3F,QAAK;AACH,cAAIoD,WAAW,IAAID,IAAIxX,MAAMyX,QAAQ;AACrCA,mBAAS/H,IAAIuJ,YAAa9E,YAAY;AACtCkF,sBAAY;YAAE5B;UAAQ,CAAE;QAC1B;MACD,CAAA;AACD;IACD;AAED,WAAO,MAAM6B,gBAAgBrC,eAAehV,cAAc;MACxDwZ;;;MAGAG,cAAclW;MACd0R;MACAhV,SAAS4X,QAAQA,KAAK5X;MACtByZ,sBAAsB7B,QAAQA,KAAK8B;MACnCvB;IACD,CAAA;EACH;AAKA,WAASwB,aAAU;AACjBC,yBAAoB;AACpB3C,gBAAY;MAAEhC,cAAc;IAAS,CAAE;AAIvC,QAAIrX,MAAMkX,WAAWlX,UAAU,cAAc;AAC3C;IACD;AAKD,QAAIA,MAAMkX,WAAWlX,UAAU,QAAQ;AACrCsZ,sBAAgBtZ,MAAMiX,eAAejX,MAAMc,UAAU;QACnDmb,gCAAgC;MACjC,CAAA;AACD;IACD;AAKD3C,oBACE5B,iBAAiB1X,MAAMiX,eACvBjX,MAAMkX,WAAWpW,UACjB;MAAEob,oBAAoBlc,MAAMkX;IAAY,CAAA;EAE5C;AAKA,iBAAeoC,gBACbrC,eACAnW,UACAkZ,MAWC;AAKDnC,mCAA+BA,4BAA4B5F,MAAK;AAChE4F,kCAA8B;AAC9BH,oBAAgBT;AAChBgB,mCACG+B,QAAQA,KAAKiC,oCAAoC;AAIpDE,uBAAmBnc,MAAMc,UAAUd,MAAMwH,OAAO;AAChDoQ,iCAA6BoC,QAAQA,KAAK5C,wBAAwB;AAElEU,oCAAgCkC,QAAQA,KAAK6B,0BAA0B;AAEvE,QAAIO,cAAclH,sBAAsBD;AACxC,QAAIoH,oBAAoBrC,QAAQA,KAAKkC;AACrC,QAAI1U,UAAUP,YAAYmV,aAAatb,UAAUqG,QAAQ;AACzD,QAAIoT,aAAaP,QAAQA,KAAKO,eAAe;AAG7C,QAAI,CAAC/S,SAAS;AACZ,UAAI9B,QAAQ0Q,uBAAuB,KAAK;QAAEpV,UAAUF,SAASE;MAAQ,CAAE;AACvE,UAAI;QAAEwG,SAAS8U;QAAiBjW;MAAO,IACrCgQ,uBAAuB+F,WAAW;AAEpCG,4BAAqB;AACrB/B,yBACE1Z,UACA;QACE0G,SAAS8U;QACTvU,YAAY,CAAA;QACZ6O,QAAQ;UACN,CAACvQ,MAAMO,EAAE,GAAGlB;QACb;MACF,GACD;QAAE6U;MAAW,CAAA;AAEf;IACD;AAQD,QACEva,MAAMsW,eACN,CAAC4B,0BACDsE,iBAAiBxc,MAAMc,UAAUA,QAAQ,KACzC,EAAEkZ,QAAQA,KAAKyB,cAAcZ,iBAAiBb,KAAKyB,WAAW5H,UAAU,IACxE;AACA2G,yBAAmB1Z,UAAU;QAAE0G;MAAS,GAAE;QAAE+S;MAAW,CAAA;AACvD;IACD;AAGD1C,kCAA8B,IAAIpH,gBAAe;AACjD,QAAIgM,UAAUC,wBACZtN,KAAK7N,SACLT,UACA+W,4BAA4BjH,QAC5BoJ,QAAQA,KAAKyB,UAAU;AAEzB,QAAIkB;AAEJ,QAAI3C,QAAQA,KAAK4B,cAAc;AAK7Be,4BAAsB,CACpBC,oBAAoBpV,OAAO,EAAEnB,MAAMO,IACnC;QAAEiW,MAAM5W,WAAWP;QAAOA,OAAOsU,KAAK4B;MAAc,CAAA;IAEvD,WACC5B,QACAA,KAAKyB,cACLZ,iBAAiBb,KAAKyB,WAAW5H,UAAU,GAC3C;AAEA,UAAIiJ,eAAe,MAAMC,aACvBN,SACA3b,UACAkZ,KAAKyB,YACLjU,SACA;QAAEpF,SAAS4X,KAAK5X;QAASmY;MAAW,CAAA;AAGtC,UAAIuC,aAAaE,gBAAgB;AAC/B;MACD;AAEDL,4BAAsBG,aAAaH;AACnCN,0BAAoBY,qBAAqBnc,UAAUkZ,KAAKyB,UAAU;AAClElB,kBAAY;AAGZkC,gBAAUC,wBACRtN,KAAK7N,SACLkb,QAAQ9Y,KACR8Y,QAAQ7L,MAAM;IAEjB;AAGD,QAAI;MAAEoM;MAAgBjV;MAAY6O;IAAM,IAAK,MAAMsG,cACjDT,SACA3b,UACA0G,SACA6U,mBACArC,QAAQA,KAAKyB,YACbzB,QAAQA,KAAKmD,mBACbnD,QAAQA,KAAK5X,SACb4X,QAAQA,KAAKN,qBAAqB,MAClCa,WACAoC,mBAAmB;AAGrB,QAAIK,gBAAgB;AAClB;IACD;AAKDnF,kCAA8B;AAE9B2C,uBAAmB1Z,UAAQgE,SAAA;MACzB0C;OACG4V,uBAAuBT,mBAAmB,GAAC;MAC9C5U;MACA6O;IAAM,CAAA,CACP;EACH;AAIA,iBAAemG,aACbN,SACA3b,UACA2a,YACAjU,SACAwS,MAAqD;AAAA,QAArDA,SAAA,QAAA;AAAAA,aAAmD,CAAA;IAAE;AAErDgC,yBAAoB;AAGpB,QAAI9E,aAAamG,wBAAwBvc,UAAU2a,UAAU;AAC7DpC,gBAAY;MAAEnC;IAAU,GAAI;MAAEqD,WAAWP,KAAKO,cAAc;IAAI,CAAE;AAGlE,QAAI5Q;AACJ,QAAI2T,cAAcC,eAAe/V,SAAS1G,QAAQ;AAElD,QAAI,CAACwc,YAAYjX,MAAMjG,UAAU,CAACkd,YAAYjX,MAAMoQ,MAAM;AACxD9M,eAAS;QACPkT,MAAM5W,WAAWP;QACjBA,OAAO0Q,uBAAuB,KAAK;UACjCoH,QAAQf,QAAQe;UAChBxc,UAAUF,SAASE;UACnByc,SAASH,YAAYjX,MAAMO;SAC5B;;IAEJ,OAAM;AACL,UAAI8W,UAAU,MAAMC,iBAClB,UACAlB,SACA,CAACa,WAAW,GACZ9V,OAAO;AAETmC,eAAS+T,QAAQ,CAAC;AAElB,UAAIjB,QAAQ7L,OAAOa,SAAS;AAC1B,eAAO;UAAEuL,gBAAgB;;MAC1B;IACF;AAED,QAAIY,iBAAiBjU,MAAM,GAAG;AAC5B,UAAIvH;AACJ,UAAI4X,QAAQA,KAAK5X,WAAW,MAAM;AAChCA,kBAAU4X,KAAK5X;MAChB,OAAM;AAIL,YAAItB,YAAW+c,0BACblU,OAAOsJ,SAAS1D,QAAQiC,IAAI,UAAU,GACtC,IAAI/P,IAAIgb,QAAQ9Y,GAAG,GACnBwD,QAAQ;AAEV/E,kBAAUtB,cAAad,MAAMc,SAASE,WAAWhB,MAAMc,SAASe;MACjE;AACD,YAAMic,wBAAwBrB,SAAS9S,QAAQ;QAC7C8R;QACArZ;MACD,CAAA;AACD,aAAO;QAAE4a,gBAAgB;;IAC1B;AAED,QAAIe,iBAAiBpU,MAAM,GAAG;AAC5B,YAAMyM,uBAAuB,KAAK;QAAEyG,MAAM;MAAgB,CAAA;IAC3D;AAED,QAAImB,cAAcrU,MAAM,GAAG;AAGzB,UAAIsU,gBAAgBrB,oBAAoBpV,SAAS8V,YAAYjX,MAAMO,EAAE;AAMrE,WAAKoT,QAAQA,KAAK5X,aAAa,MAAM;AACnCsV,wBAAgBC,OAAc3V;MAC/B;AAED,aAAO;QACL2a,qBAAqB,CAACsB,cAAc5X,MAAMO,IAAI+C,MAAM;;IAEvD;AAED,WAAO;MACLgT,qBAAqB,CAACW,YAAYjX,MAAMO,IAAI+C,MAAM;;EAEtD;AAIA,iBAAeuT,cACbT,SACA3b,UACA0G,SACA0U,oBACAT,YACA0B,mBACA/a,SACAsX,kBACAa,WACAoC,qBAAyC;AAGzC,QAAIN,oBACFH,sBAAsBe,qBAAqBnc,UAAU2a,UAAU;AAIjE,QAAIyC,mBACFzC,cACA0B,qBACAgB,4BAA4B9B,iBAAiB;AAE/C,QAAID,cAAclH,sBAAsBD;AACxC,QAAI,CAACmJ,eAAeC,oBAAoB,IAAIC,iBAC1ClP,KAAK7N,SACLvB,OACAwH,SACA0W,kBACApd,UACAwU,OAAOG,uBAAuBiE,qBAAqB,MACnDpE,OAAOK,sCACPuC,wBACAC,yBACAC,uBACAQ,iBACAF,kBACAD,kBACA2D,aACAjV,UACAwV,mBAAmB;AAMrBJ,0BACGkB,aACC,EAAEjW,WAAWA,QAAQkD,KAAM8L,OAAMA,EAAEnQ,MAAMO,OAAO6W,OAAO,MACtDW,iBAAiBA,cAAc1T,KAAM8L,OAAMA,EAAEnQ,MAAMO,OAAO6W,OAAO,CAAE;AAGxElF,8BAA0B,EAAED;AAG5B,QAAI8F,cAAcje,WAAW,KAAKke,qBAAqBle,WAAW,GAAG;AACnE,UAAIoe,mBAAkBC,uBAAsB;AAC5ChE,yBACE1Z,UAAQgE,SAAA;QAEN0C;QACAO,YAAY,CAAA;;QAEZ6O,QACE+F,uBAAuBqB,cAAcrB,oBAAoB,CAAC,CAAC,IACvD;UAAE,CAACA,oBAAoB,CAAC,CAAC,GAAGA,oBAAoB,CAAC,EAAEjX;QAAO,IAC1D;MAAI,GACP0X,uBAAuBT,mBAAmB,GACzC4B,mBAAkB;QAAEhH,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;UAAM,CAAA,CAAE,GAElE;QAAEgD;MAAW,CAAA;AAEf,aAAO;QAAEyC,gBAAgB;;IAC1B;AAQD,QACE,CAAC/E,gCACA,CAAC3C,OAAOG,uBAAuB,CAACiE,mBACjC;AACA2E,2BAAqBvV,QAAS2V,QAAM;AAClC,YAAItE,UAAUna,MAAMuX,SAAS/F,IAAIiN,GAAG5d,GAAG;AACvC,YAAI6d,sBAAsBC,kBACxB1e,QACAka,UAAUA,QAAQlS,OAAOhI,MAAS;AAEpCD,cAAMuX,SAAS7H,IAAI+O,GAAG5d,KAAK6d,mBAAmB;MAChD,CAAC;AAED,UAAIpH;AACJ,UAAIqF,uBAAuB,CAACqB,cAAcrB,oBAAoB,CAAC,CAAC,GAAG;AAIjErF,qBAAa;UACX,CAACqF,oBAAoB,CAAC,CAAC,GAAGA,oBAAoB,CAAC,EAAE1U;;MAEpD,WAAUjI,MAAMsX,YAAY;AAC3B,YAAI/L,OAAOwP,KAAK/a,MAAMsX,UAAU,EAAEnX,WAAW,GAAG;AAC9CmX,uBAAa;QACd,OAAM;AACLA,uBAAatX,MAAMsX;QACpB;MACF;AAED+B,kBAAWvU,SAAA;QAEPoS,YAAYmF;SACR/E,eAAerX,SAAY;QAAEqX;UAAe,CAAA,GAC5C+G,qBAAqBle,SAAS,IAC9B;QAAEoX,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;UAClC,CAAA,CAAE,GAER;QACEgD;MACD,CAAA;IAEJ;AAED8D,yBAAqBvV,QAAS2V,QAAM;AAClC,UAAIpG,iBAAiB5I,IAAIgP,GAAG5d,GAAG,GAAG;AAChC+d,qBAAaH,GAAG5d,GAAG;MACpB;AACD,UAAI4d,GAAGjO,YAAY;AAIjB6H,yBAAiB3I,IAAI+O,GAAG5d,KAAK4d,GAAGjO,UAAU;MAC3C;IACH,CAAC;AAGD,QAAIqO,iCAAiCA,MACnCR,qBAAqBvV,QAASgW,OAAMF,aAAaE,EAAEje,GAAG,CAAC;AACzD,QAAIgX,6BAA6B;AAC/BA,kCAA4BjH,OAAO7K,iBACjC,SACA8Y,8BAA8B;IAEjC;AAED,QAAI;MAAEE;MAAeC;QACnB,MAAMC,+BACJjf,MAAMwH,SACNA,SACA4W,eACAC,sBACA5B,OAAO;AAGX,QAAIA,QAAQ7L,OAAOa,SAAS;AAC1B,aAAO;QAAEuL,gBAAgB;;IAC1B;AAKD,QAAInF,6BAA6B;AAC/BA,kCAA4BjH,OAAO5K,oBACjC,SACA6Y,8BAA8B;IAEjC;AACDR,yBAAqBvV,QAAS2V,QAAOpG,iBAAiB3G,OAAO+M,GAAG5d,GAAG,CAAC;AAGpE,QAAIkS,YAAWmM,aAAa,CAAC,GAAGH,eAAe,GAAGC,cAAc,CAAC;AACjE,QAAIjM,WAAU;AACZ,UAAIA,UAASnO,OAAOwZ,cAAcje,QAAQ;AAIxC,YAAIgf,aACFd,qBAAqBtL,UAASnO,MAAMwZ,cAAcje,MAAM,EAAEU;AAC5D4X,yBAAiBxH,IAAIkO,UAAU;MAChC;AACD,YAAMrB,wBAAwBrB,SAAS1J,UAASpJ,QAAQ;QACtDvH;MACD,CAAA;AACD,aAAO;QAAE4a,gBAAgB;;IAC1B;AAGD,QAAI;MAAEjV;MAAY6O;IAAM,IAAKwI,kBAC3Bpf,OACAwH,SACA4W,eACAW,eACApC,qBACA0B,sBACAW,gBACAnG,eAAe;AAIjBA,oBAAgB/P,QAAQ,CAACuW,cAAc5B,YAAW;AAChD4B,mBAAatN,UAAWN,aAAW;AAIjC,YAAIA,WAAW4N,aAAarO,MAAM;AAChC6H,0BAAgBnH,OAAO+L,OAAO;QAC/B;MACH,CAAC;IACH,CAAC;AAGD,QAAInI,OAAOG,uBAAuBiE,oBAAoB1Z,MAAM4W,QAAQ;AAClErL,aAAO5L,QAAQK,MAAM4W,MAAM,EACxBjM,OAAOmG,WAAA;AAAA,YAAC,CAAClK,EAAE,IAACkK;AAAA,eAAK,CAACsN,cAAc1T,KAAM8L,OAAMA,EAAEnQ,MAAMO,OAAOA,EAAE;MAAC,CAAA,EAC9DkC,QAAQyJ,WAAqB;AAAA,YAApB,CAACkL,SAAS/X,KAAK,IAAC6M;AACxBqE,iBAASrL,OAAO1F,OAAO+Q,UAAU,CAAA,GAAI;UAAE,CAAC6G,OAAO,GAAG/X;QAAK,CAAE;MAC3D,CAAC;IACJ;AAED,QAAI6Y,kBAAkBC,uBAAsB;AAC5C,QAAIc,qBAAqBC,qBAAqBhH,uBAAuB;AACrE,QAAIiH,uBACFjB,mBAAmBe,sBAAsBjB,qBAAqBle,SAAS;AAEzE,WAAA2E,SAAA;MACEiD;MACA6O;IAAM,GACF4I,uBAAuB;MAAEjI,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;QAAM,CAAA,CAAE;EAEzE;AAGA,WAASkI,MACP5e,KACA4c,SACAha,MACAuW,MAAyB;AAEzB,QAAIjF,UAAU;AACZ,YAAM,IAAI5Q,MACR,kMAE+C;IAElD;AAED,QAAIkU,iBAAiB5I,IAAI5O,GAAG;AAAG+d,mBAAa/d,GAAG;AAC/C,QAAI0Z,aAAaP,QAAQA,KAAKM,wBAAwB;AAEtD,QAAI8B,cAAclH,sBAAsBD;AACxC,QAAIoG,iBAAiBC,YACnBtb,MAAMc,UACNd,MAAMwH,SACNL,UACAmO,OAAOI,oBACPjS,MACA6R,OAAOnH,sBACPsP,SACAzD,QAAI,OAAA,SAAJA,KAAMwB,QAAQ;AAEhB,QAAIhU,UAAUP,YAAYmV,aAAaf,gBAAgBlU,QAAQ;AAE/D,QAAI,CAACK,SAAS;AACZkY,sBACE7e,KACA4c,SACArH,uBAAuB,KAAK;QAAEpV,UAAUqa;OAAgB,GACxD;QAAEd;MAAS,CAAE;AAEf;IACD;AAED,QAAI;MAAE5Y;MAAM8Z;MAAY/V;IAAK,IAAKgW,yBAChCpG,OAAOE,wBACP,MACA6F,gBACArB,IAAI;AAGN,QAAItU,OAAO;AACTga,sBAAgB7e,KAAK4c,SAAS/X,OAAO;QAAE6U;MAAW,CAAA;AAClD;IACD;AAED,QAAIzS,QAAQyV,eAAe/V,SAAS7F,IAAI;AAExCiW,iCAA6BoC,QAAQA,KAAK5C,wBAAwB;AAElE,QAAIqE,cAAcZ,iBAAiBY,WAAW5H,UAAU,GAAG;AACzD8L,0BACE9e,KACA4c,SACA9b,MACAmG,OACAN,SACA+S,WACAkB,UAAU;AAEZ;IACD;AAID/C,qBAAiBhJ,IAAI7O,KAAK;MAAE4c;MAAS9b;IAAM,CAAA;AAC3Cie,wBACE/e,KACA4c,SACA9b,MACAmG,OACAN,SACA+S,WACAkB,UAAU;EAEd;AAIA,iBAAekE,oBACb9e,KACA4c,SACA9b,MACAmG,OACA+X,gBACAtF,WACAkB,YAAsB;AAEtBO,yBAAoB;AACpBtD,qBAAiBhH,OAAO7Q,GAAG;AAE3B,QAAI,CAACiH,MAAMzB,MAAMjG,UAAU,CAAC0H,MAAMzB,MAAMoQ,MAAM;AAC5C,UAAI/Q,QAAQ0Q,uBAAuB,KAAK;QACtCoH,QAAQ/B,WAAW5H;QACnB7S,UAAUW;QACV8b;MACD,CAAA;AACDiC,sBAAgB7e,KAAK4c,SAAS/X,OAAO;QAAE6U;MAAW,CAAA;AAClD;IACD;AAGD,QAAIuF,kBAAkB9f,MAAMuX,SAAS/F,IAAI3Q,GAAG;AAC5Ckf,uBAAmBlf,KAAKmf,qBAAqBvE,YAAYqE,eAAe,GAAG;MACzEvF;IACD,CAAA;AAGD,QAAI0F,kBAAkB,IAAIxP,gBAAe;AACzC,QAAIyP,eAAexD,wBACjBtN,KAAK7N,SACLI,MACAse,gBAAgBrP,QAChB6K,UAAU;AAEZpD,qBAAiB3I,IAAI7O,KAAKof,eAAe;AAEzC,QAAIE,oBAAoB7H;AACxB,QAAI8H,gBAAgB,MAAMzC,iBACxB,UACAuC,cACA,CAACpY,KAAK,GACN+X,cAAc;AAEhB,QAAI/C,eAAesD,cAAc,CAAC;AAElC,QAAIF,aAAatP,OAAOa,SAAS;AAG/B,UAAI4G,iBAAiB7G,IAAI3Q,GAAG,MAAMof,iBAAiB;AACjD5H,yBAAiB3G,OAAO7Q,GAAG;MAC5B;AACD;IACD;AAKD,QAAIyU,OAAOC,qBAAqBqD,gBAAgBnJ,IAAI5O,GAAG,GAAG;AACxD,UAAI+c,iBAAiBd,YAAY,KAAKkB,cAAclB,YAAY,GAAG;AACjEiD,2BAAmBlf,KAAKwf,eAAepgB,MAAS,CAAC;AACjD;MACD;IAEF,OAAM;AACL,UAAI2d,iBAAiBd,YAAY,GAAG;AAClCzE,yBAAiB3G,OAAO7Q,GAAG;AAC3B,YAAI0X,0BAA0B4H,mBAAmB;AAK/CJ,6BAAmBlf,KAAKwf,eAAepgB,MAAS,CAAC;AACjD;QACD,OAAM;AACLwY,2BAAiBxH,IAAIpQ,GAAG;AACxBkf,6BAAmBlf,KAAK8d,kBAAkBlD,UAAU,CAAC;AACrD,iBAAOqC,wBAAwBoC,cAAcpD,cAAc;YACzDK,mBAAmB1B;UACpB,CAAA;QACF;MACF;AAGD,UAAIuC,cAAclB,YAAY,GAAG;AAC/B4C,wBAAgB7e,KAAK4c,SAASX,aAAapX,KAAK;AAChD;MACD;IACF;AAED,QAAIqY,iBAAiBjB,YAAY,GAAG;AAClC,YAAM1G,uBAAuB,KAAK;QAAEyG,MAAM;MAAgB,CAAA;IAC3D;AAID,QAAI5a,eAAejC,MAAMkX,WAAWpW,YAAYd,MAAMc;AACtD,QAAIwf,sBAAsB5D,wBACxBtN,KAAK7N,SACLU,cACAge,gBAAgBrP,MAAM;AAExB,QAAIwL,cAAclH,sBAAsBD;AACxC,QAAIzN,UACFxH,MAAMkX,WAAWlX,UAAU,SACvBiH,YAAYmV,aAAapc,MAAMkX,WAAWpW,UAAUqG,QAAQ,IAC5DnH,MAAMwH;AAEZxD,cAAUwD,SAAS,8CAA8C;AAEjE,QAAI+Y,SAAS,EAAEjI;AACfE,mBAAe9I,IAAI7O,KAAK0f,MAAM;AAE9B,QAAIC,cAAc7B,kBAAkBlD,YAAYqB,aAAa7U,IAAI;AACjEjI,UAAMuX,SAAS7H,IAAI7O,KAAK2f,WAAW;AAEnC,QAAI,CAACpC,eAAeC,oBAAoB,IAAIC,iBAC1ClP,KAAK7N,SACLvB,OACAwH,SACAiU,YACAxZ,cACA,OACAqT,OAAOK,sCACPuC,wBACAC,yBACAC,uBACAQ,iBACAF,kBACAD,kBACA2D,aACAjV,UACA,CAACW,MAAMzB,MAAMO,IAAIkW,YAAY,CAAC;AAMhCuB,yBACG1T,OAAQ8T,QAAOA,GAAG5d,QAAQA,GAAG,EAC7BiI,QAAS2V,QAAM;AACd,UAAIgC,WAAWhC,GAAG5d;AAClB,UAAIif,mBAAkB9f,MAAMuX,SAAS/F,IAAIiP,QAAQ;AACjD,UAAI/B,sBAAsBC,kBACxB1e,QACA6f,mBAAkBA,iBAAgB7X,OAAOhI,MAAS;AAEpDD,YAAMuX,SAAS7H,IAAI+Q,UAAU/B,mBAAmB;AAChD,UAAIrG,iBAAiB5I,IAAIgR,QAAQ,GAAG;AAClC7B,qBAAa6B,QAAQ;MACtB;AACD,UAAIhC,GAAGjO,YAAY;AACjB6H,yBAAiB3I,IAAI+Q,UAAUhC,GAAGjO,UAAU;MAC7C;IACH,CAAC;AAEH6I,gBAAY;MAAE9B,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;IAAC,CAAE;AAEjD,QAAIsH,iCAAiCA,MACnCR,qBAAqBvV,QAAS2V,QAAOG,aAAaH,GAAG5d,GAAG,CAAC;AAE3Dof,oBAAgBrP,OAAO7K,iBACrB,SACA8Y,8BAA8B;AAGhC,QAAI;MAAEE;MAAeC;QACnB,MAAMC,+BACJjf,MAAMwH,SACNA,SACA4W,eACAC,sBACAiC,mBAAmB;AAGvB,QAAIL,gBAAgBrP,OAAOa,SAAS;AAClC;IACD;AAEDwO,oBAAgBrP,OAAO5K,oBACrB,SACA6Y,8BAA8B;AAGhCrG,mBAAe9G,OAAO7Q,GAAG;AACzBwX,qBAAiB3G,OAAO7Q,GAAG;AAC3Bwd,yBAAqBvV,QAASyH,OAAM8H,iBAAiB3G,OAAOnB,EAAE1P,GAAG,CAAC;AAElE,QAAIkS,YAAWmM,aAAa,CAAC,GAAGH,eAAe,GAAGC,cAAc,CAAC;AACjE,QAAIjM,WAAU;AACZ,UAAIA,UAASnO,OAAOwZ,cAAcje,QAAQ;AAIxC,YAAIgf,aACFd,qBAAqBtL,UAASnO,MAAMwZ,cAAcje,MAAM,EAAEU;AAC5D4X,yBAAiBxH,IAAIkO,UAAU;MAChC;AACD,aAAOrB,wBAAwBwC,qBAAqBvN,UAASpJ,MAAM;IACpE;AAGD,QAAI;MAAE5B;MAAY6O;QAAWwI,kBAC3Bpf,OACAA,MAAMwH,SACN4W,eACAW,eACA9e,QACAoe,sBACAW,gBACAnG,eAAe;AAKjB,QAAI7Y,MAAMuX,SAAS9H,IAAI5O,GAAG,GAAG;AAC3B,UAAI6f,cAAcL,eAAevD,aAAa7U,IAAI;AAClDjI,YAAMuX,SAAS7H,IAAI7O,KAAK6f,WAAW;IACpC;AAEDnB,yBAAqBgB,MAAM;AAK3B,QACEvgB,MAAMkX,WAAWlX,UAAU,aAC3BugB,SAAShI,yBACT;AACAvU,gBAAU0T,eAAe,yBAAyB;AAClDG,qCAA+BA,4BAA4B5F,MAAK;AAEhEuI,yBAAmBxa,MAAMkX,WAAWpW,UAAU;QAC5C0G;QACAO;QACA6O;QACAW,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;MACjC,CAAA;IACF,OAAM;AAIL8B,kBAAY;QACVzC;QACA7O,YAAYiT,gBACVhb,MAAM+H,YACNA,YACAP,SACAoP,MAAM;QAERW,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;MACjC,CAAA;AACDW,+BAAyB;IAC1B;EACH;AAGA,iBAAe0H,oBACb/e,KACA4c,SACA9b,MACAmG,OACAN,SACA+S,WACAkB,YAAuB;AAEvB,QAAIqE,kBAAkB9f,MAAMuX,SAAS/F,IAAI3Q,GAAG;AAC5Ckf,uBACElf,KACA8d,kBACElD,YACAqE,kBAAkBA,gBAAgB7X,OAAOhI,MAAS,GAEpD;MAAEsa;IAAW,CAAA;AAIf,QAAI0F,kBAAkB,IAAIxP,gBAAe;AACzC,QAAIyP,eAAexD,wBACjBtN,KAAK7N,SACLI,MACAse,gBAAgBrP,MAAM;AAExByH,qBAAiB3I,IAAI7O,KAAKof,eAAe;AAEzC,QAAIE,oBAAoB7H;AACxB,QAAIoF,UAAU,MAAMC,iBAClB,UACAuC,cACA,CAACpY,KAAK,GACNN,OAAO;AAET,QAAImC,SAAS+T,QAAQ,CAAC;AAMtB,QAAIK,iBAAiBpU,MAAM,GAAG;AAC5BA,eACG,MAAMgX,oBAAoBhX,QAAQuW,aAAatP,QAAQ,IAAI,KAC5DjH;IACH;AAID,QAAI0O,iBAAiB7G,IAAI3Q,GAAG,MAAMof,iBAAiB;AACjD5H,uBAAiB3G,OAAO7Q,GAAG;IAC5B;AAED,QAAIqf,aAAatP,OAAOa,SAAS;AAC/B;IACD;AAID,QAAImH,gBAAgBnJ,IAAI5O,GAAG,GAAG;AAC5Bkf,yBAAmBlf,KAAKwf,eAAepgB,MAAS,CAAC;AACjD;IACD;AAGD,QAAI2d,iBAAiBjU,MAAM,GAAG;AAC5B,UAAI4O,0BAA0B4H,mBAAmB;AAG/CJ,2BAAmBlf,KAAKwf,eAAepgB,MAAS,CAAC;AACjD;MACD,OAAM;AACLwY,yBAAiBxH,IAAIpQ,GAAG;AACxB,cAAMid,wBAAwBoC,cAAcvW,MAAM;AAClD;MACD;IACF;AAGD,QAAIqU,cAAcrU,MAAM,GAAG;AACzB+V,sBAAgB7e,KAAK4c,SAAS9T,OAAOjE,KAAK;AAC1C;IACD;AAED1B,cAAU,CAAC+Z,iBAAiBpU,MAAM,GAAG,iCAAiC;AAGtEoW,uBAAmBlf,KAAKwf,eAAe1W,OAAO1B,IAAI,CAAC;EACrD;AAqBA,iBAAe6V,wBACbrB,SACA1J,WAAwB6N,QASlB;AAAA,QARN;MACEnF;MACA0B;MACA/a;4BAKE,CAAA,IAAEwe;AAEN,QAAI7N,UAASE,SAAS1D,QAAQE,IAAI,oBAAoB,GAAG;AACvDyI,+BAAyB;IAC1B;AAED,QAAIpX,WAAWiS,UAASE,SAAS1D,QAAQiC,IAAI,UAAU;AACvDxN,cAAUlD,UAAU,qDAAqD;AACzEA,eAAW+c,0BACT/c,UACA,IAAIW,IAAIgb,QAAQ9Y,GAAG,GACnBwD,QAAQ;AAEV,QAAI0Z,mBAAmB9f,eAAef,MAAMc,UAAUA,UAAU;MAC9Dga,aAAa;IACd,CAAA;AAED,QAAIjG,WAAW;AACb,UAAIiM,mBAAmB;AAEvB,UAAI/N,UAASE,SAAS1D,QAAQE,IAAI,yBAAyB,GAAG;AAE5DqR,2BAAmB;iBACVxM,mBAAmBxJ,KAAKhK,QAAQ,GAAG;AAC5C,cAAM6C,MAAMyL,KAAK7N,QAAQC,UAAUV,QAAQ;AAC3CggB;QAEEnd,IAAImC,WAAW8O,aAAa9T,SAASgF;QAErCsB,cAAczD,IAAI3C,UAAUmG,QAAQ,KAAK;MAC5C;AAED,UAAI2Z,kBAAkB;AACpB,YAAI1e,SAAS;AACXwS,uBAAa9T,SAASsB,QAAQtB,QAAQ;QACvC,OAAM;AACL8T,uBAAa9T,SAAS+E,OAAO/E,QAAQ;QACtC;AACD;MACD;IACF;AAID+W,kCAA8B;AAE9B,QAAIkJ,wBACF3e,YAAY,OAAOuV,OAActV,UAAUsV,OAAc3V;AAI3D,QAAI;MAAE6R;MAAYC;MAAYC;QAAgB/T,MAAMkX;AACpD,QACE,CAACuE,cACD,CAAC0B,qBACDtJ,cACAC,cACAC,aACA;AACA0H,mBAAa0C,4BAA4Bne,MAAMkX,UAAU;IAC1D;AAKD,QAAIgH,mBAAmBzC,cAAc0B;AACrC,QACExJ,kCAAkClE,IAAIsD,UAASE,SAAS3D,MAAM,KAC9D4O,oBACArD,iBAAiBqD,iBAAiBrK,UAAU,GAC5C;AACA,YAAMyF,gBAAgByH,uBAAuBF,kBAAkB;QAC7DpF,YAAU3W,SAAA,CAAA,GACLoZ,kBAAgB;UACnBpK,YAAYhT;SACb;;QAEDsW,oBAAoBQ;MACrB,CAAA;IACF,OAAM;AAGL,UAAIsE,qBAAqBe,qBACvB4D,kBACApF,UAAU;AAEZ,YAAMnC,gBAAgByH,uBAAuBF,kBAAkB;QAC7D3E;;QAEAiB;;QAEA/F,oBAAoBQ;MACrB,CAAA;IACF;EACH;AAIA,iBAAe+F,iBACbd,MACAJ,SACA2B,eACA5W,SAAiC;AAEjC,QAAI;AACF,UAAIkW,UAAU,MAAMsD,qBAClB7L,kBACA0H,MACAJ,SACA2B,eACA5W,SACAd,UACAF,kBAAkB;AAGpB,aAAO,MAAM8J,QAAQ2Q,IACnBvD,QAAQ9d,IAAI,CAAC+J,QAAQlC,MAAK;AACxB,YAAIyZ,wBAAwBvX,MAAM,GAAG;AACnC,cAAIsJ,WAAWtJ,OAAOA;AACtB,iBAAO;YACLkT,MAAM5W,WAAW8M;YACjBE,UAAUkO,yCACRlO,UACAwJ,SACA2B,cAAc3W,CAAC,EAAEpB,MAAMO,IACvBY,SACAL,UACAmO,OAAOnH,oBAAoB;;QAGhC;AAED,eAAOiT,iCAAiCzX,MAAM;MAChD,CAAC,CAAC;aAEGpF,GAAG;AAGV,aAAO6Z,cAAcxe,IAAI,OAAO;QAC9Bid,MAAM5W,WAAWP;QACjBA,OAAOnB;MACR,EAAC;IACH;EACH;AAEA,iBAAe0a,+BACboC,gBACA7Z,SACA4W,eACAkD,gBACA7E,SAAgB;AAEhB,QAAI,CAACsC,eAAe,GAAGC,cAAc,IAAI,MAAM1O,QAAQ2Q,IAAI,CACzD7C,cAAcje,SACVwd,iBAAiB,UAAUlB,SAAS2B,eAAe5W,OAAO,IAC1D,CAAA,GACJ,GAAG8Z,eAAe1hB,IAAKkf,OAAK;AAC1B,UAAIA,EAAEtX,WAAWsX,EAAEhX,SAASgX,EAAEtO,YAAY;AACxC,YAAI+Q,iBAAiB7E,wBACnBtN,KAAK7N,SACLud,EAAEnd,MACFmd,EAAEtO,WAAWI,MAAM;AAErB,eAAO+M,iBACL,UACA4D,gBACA,CAACzC,EAAEhX,KAAK,GACRgX,EAAEtX,OAAO,EACT4J,KAAMb,OAAMA,EAAE,CAAC,CAAC;MACnB,OAAM;AACL,eAAOD,QAAQ8B,QAAoB;UACjCyK,MAAM5W,WAAWP;UACjBA,OAAO0Q,uBAAuB,KAAK;YACjCpV,UAAU8d,EAAEnd;WACb;QACF,CAAA;MACF;KACF,CAAC,CACH;AAED,UAAM2O,QAAQ2Q,IAAI,CAChBO,uBACEH,gBACAjD,eACAW,eACAA,cAAcnf,IAAI,MAAM6c,QAAQ7L,MAAM,GACtC,OACA5Q,MAAM+H,UAAU,GAElByZ,uBACEH,gBACAC,eAAe1hB,IAAKkf,OAAMA,EAAEhX,KAAK,GACjCkX,gBACAsC,eAAe1hB,IAAKkf,OAAOA,EAAEtO,aAAasO,EAAEtO,WAAWI,SAAS,IAAK,GACrE,IAAI,CACL,CACF;AAED,WAAO;MACLmO;MACAC;;EAEJ;AAEA,WAAShD,uBAAoB;AAE3B9D,6BAAyB;AAIzBC,4BAAwBpW,KAAK,GAAGwa,sBAAqB,CAAE;AAGvD7D,qBAAiB5P,QAAQ,CAACgE,GAAGjM,QAAO;AAClC,UAAIwX,iBAAiB5I,IAAI5O,GAAG,GAAG;AAC7BuX,8BAAsBrW,KAAKlB,GAAG;AAC9B+d,qBAAa/d,GAAG;MACjB;IACH,CAAC;EACH;AAEA,WAASkf,mBACPlf,KACAsZ,SACAH,MAAkC;AAAA,QAAlCA,SAAAA,QAAAA;AAAAA,aAAgC,CAAA;IAAE;AAElCha,UAAMuX,SAAS7H,IAAI7O,KAAKsZ,OAAO;AAC/Bd,gBACE;MAAE9B,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;IAAG,GACrC;MAAEgD,YAAYP,QAAQA,KAAKO,eAAe;IAAM,CAAA;EAEpD;AAEA,WAASmF,gBACP7e,KACA4c,SACA/X,OACAsU,MAAkC;AAAA,QAAlCA,SAAA,QAAA;AAAAA,aAAgC,CAAA;IAAE;AAElC,QAAIiE,gBAAgBrB,oBAAoB5c,MAAMwH,SAASiW,OAAO;AAC9D5D,kBAAchZ,GAAG;AACjBwY,gBACE;MACEzC,QAAQ;QACN,CAACqH,cAAc5X,MAAMO,EAAE,GAAGlB;;MAE5B6R,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;IACjC,GACD;MAAEgD,YAAYP,QAAQA,KAAKO,eAAe;IAAI,CAAE;EAEpD;AAEA,WAASkH,WAAwB5gB,KAAW;AAC1C,QAAIyU,OAAOC,mBAAmB;AAC5BoD,qBAAejJ,IAAI7O,MAAM8X,eAAenH,IAAI3Q,GAAG,KAAK,KAAK,CAAC;AAG1D,UAAI+X,gBAAgBnJ,IAAI5O,GAAG,GAAG;AAC5B+X,wBAAgBlH,OAAO7Q,GAAG;MAC3B;IACF;AACD,WAAOb,MAAMuX,SAAS/F,IAAI3Q,GAAG,KAAKqT;EACpC;AAEA,WAAS2F,cAAchZ,KAAW;AAChC,QAAIsZ,UAAUna,MAAMuX,SAAS/F,IAAI3Q,GAAG;AAIpC,QACEwX,iBAAiB5I,IAAI5O,GAAG,KACxB,EAAEsZ,WAAWA,QAAQna,UAAU,aAAawY,eAAe/I,IAAI5O,GAAG,IAClE;AACA+d,mBAAa/d,GAAG;IACjB;AACD6X,qBAAiBhH,OAAO7Q,GAAG;AAC3B2X,mBAAe9G,OAAO7Q,GAAG;AACzB4X,qBAAiB/G,OAAO7Q,GAAG;AAC3B+X,oBAAgBlH,OAAO7Q,GAAG;AAC1Bb,UAAMuX,SAAS7F,OAAO7Q,GAAG;EAC3B;AAEA,WAAS6gB,4BAA4B7gB,KAAW;AAC9C,QAAIyU,OAAOC,mBAAmB;AAC5B,UAAIoM,SAAShJ,eAAenH,IAAI3Q,GAAG,KAAK,KAAK;AAC7C,UAAI8gB,SAAS,GAAG;AACdhJ,uBAAejH,OAAO7Q,GAAG;AACzB+X,wBAAgB3H,IAAIpQ,GAAG;MACxB,OAAM;AACL8X,uBAAejJ,IAAI7O,KAAK8gB,KAAK;MAC9B;IACF,OAAM;AACL9H,oBAAchZ,GAAG;IAClB;AACDwY,gBAAY;MAAE9B,UAAU,IAAIC,IAAIxX,MAAMuX,QAAQ;IAAC,CAAE;EACnD;AAEA,WAASqH,aAAa/d,KAAW;AAC/B,QAAI2P,aAAa6H,iBAAiB7G,IAAI3Q,GAAG;AACzCmD,cAAUwM,YAA0C3P,gCAAAA,GAAK;AACzD2P,eAAWyB,MAAK;AAChBoG,qBAAiB3G,OAAO7Q,GAAG;EAC7B;AAEA,WAAS+gB,iBAAiB7G,MAAc;AACtC,aAASla,OAAOka,MAAM;AACpB,UAAIZ,UAAUsH,WAAW5gB,GAAG;AAC5B,UAAI6f,cAAcL,eAAelG,QAAQlS,IAAI;AAC7CjI,YAAMuX,SAAS7H,IAAI7O,KAAK6f,WAAW;IACpC;EACH;AAEA,WAASlC,yBAAsB;AAC7B,QAAIqD,WAAW,CAAA;AACf,QAAItD,kBAAkB;AACtB,aAAS1d,OAAO4X,kBAAkB;AAChC,UAAI0B,UAAUna,MAAMuX,SAAS/F,IAAI3Q,GAAG;AACpCmD,gBAAUmW,SAA8BtZ,uBAAAA,GAAK;AAC7C,UAAIsZ,QAAQna,UAAU,WAAW;AAC/ByY,yBAAiB/G,OAAO7Q,GAAG;AAC3BghB,iBAAS9f,KAAKlB,GAAG;AACjB0d,0BAAkB;MACnB;IACF;AACDqD,qBAAiBC,QAAQ;AACzB,WAAOtD;EACT;AAEA,WAASgB,qBAAqBuC,UAAgB;AAC5C,QAAIC,aAAa,CAAA;AACjB,aAAS,CAAClhB,KAAK+F,EAAE,KAAK4R,gBAAgB;AACpC,UAAI5R,KAAKkb,UAAU;AACjB,YAAI3H,UAAUna,MAAMuX,SAAS/F,IAAI3Q,GAAG;AACpCmD,kBAAUmW,SAA8BtZ,uBAAAA,GAAK;AAC7C,YAAIsZ,QAAQna,UAAU,WAAW;AAC/B4e,uBAAa/d,GAAG;AAChB2X,yBAAe9G,OAAO7Q,GAAG;AACzBkhB,qBAAWhgB,KAAKlB,GAAG;QACpB;MACF;IACF;AACD+gB,qBAAiBG,UAAU;AAC3B,WAAOA,WAAW5hB,SAAS;EAC7B;AAEA,WAAS6hB,WAAWnhB,KAAa4B,IAAmB;AAClD,QAAIwf,UAAmBjiB,MAAMyX,SAASjG,IAAI3Q,GAAG,KAAKsT;AAElD,QAAI2E,iBAAiBtH,IAAI3Q,GAAG,MAAM4B,IAAI;AACpCqW,uBAAiBpJ,IAAI7O,KAAK4B,EAAE;IAC7B;AAED,WAAOwf;EACT;AAEA,WAASnI,cAAcjZ,KAAW;AAChCb,UAAMyX,SAAS/F,OAAO7Q,GAAG;AACzBiY,qBAAiBpH,OAAO7Q,GAAG;EAC7B;AAGA,WAASuY,cAAcvY,KAAaqhB,YAAmB;AACrD,QAAID,UAAUjiB,MAAMyX,SAASjG,IAAI3Q,GAAG,KAAKsT;AAIzCnQ,cACGie,QAAQjiB,UAAU,eAAekiB,WAAWliB,UAAU,aACpDiiB,QAAQjiB,UAAU,aAAakiB,WAAWliB,UAAU,aACpDiiB,QAAQjiB,UAAU,aAAakiB,WAAWliB,UAAU,gBACpDiiB,QAAQjiB,UAAU,aAAakiB,WAAWliB,UAAU,eACpDiiB,QAAQjiB,UAAU,gBAAgBkiB,WAAWliB,UAAU,aAAY,uCACjCiiB,QAAQjiB,QAAK,SAAOkiB,WAAWliB,KAAO;AAG7E,QAAIyX,WAAW,IAAID,IAAIxX,MAAMyX,QAAQ;AACrCA,aAAS/H,IAAI7O,KAAKqhB,UAAU;AAC5B7I,gBAAY;MAAE5B;IAAQ,CAAE;EAC1B;AAEA,WAASyB,sBAAqBiJ,OAQ7B;AAAA,QAR8B;MAC7BhJ;MACAlX;MACAgV;IAKD,IAAAkL;AACC,QAAIrJ,iBAAiBzG,SAAS,GAAG;AAC/B;IACD;AAID,QAAIyG,iBAAiBzG,OAAO,GAAG;AAC7BpR,cAAQ,OAAO,8CAA8C;IAC9D;AAED,QAAItB,UAAUuQ,MAAMvB,KAAKmK,iBAAiBnZ,QAAO,CAAE;AACnD,QAAI,CAACsZ,YAAYmJ,eAAe,IAAIziB,QAAQA,QAAQQ,SAAS,CAAC;AAC9D,QAAI8hB,UAAUjiB,MAAMyX,SAASjG,IAAIyH,UAAU;AAE3C,QAAIgJ,WAAWA,QAAQjiB,UAAU,cAAc;AAG7C;IACD;AAID,QAAIoiB,gBAAgB;MAAEjJ;MAAiBlX;MAAcgV;IAAe,CAAA,GAAG;AACrE,aAAOgC;IACR;EACH;AAEA,WAASsD,sBACP8F,WAAwC;AAExC,QAAIC,oBAA8B,CAAA;AAClCzJ,oBAAgB/P,QAAQ,CAACyZ,KAAK9E,YAAW;AACvC,UAAI,CAAC4E,aAAaA,UAAU5E,OAAO,GAAG;AAIpC8E,YAAIvQ,OAAM;AACVsQ,0BAAkBvgB,KAAK0b,OAAO;AAC9B5E,wBAAgBnH,OAAO+L,OAAO;MAC/B;IACH,CAAC;AACD,WAAO6E;EACT;AAIA,WAASE,wBACPC,WACAC,aACAC,QAAwC;AAExC9M,2BAAuB4M;AACvB1M,wBAAoB2M;AACpB5M,8BAA0B6M,UAAU;AAKpC,QAAI,CAAC3M,yBAAyBhW,MAAMkX,eAAetD,iBAAiB;AAClEoC,8BAAwB;AACxB,UAAI4M,IAAIzH,uBAAuBnb,MAAMc,UAAUd,MAAMwH,OAAO;AAC5D,UAAIob,KAAK,MAAM;AACbvJ,oBAAY;UAAElC,uBAAuByL;QAAC,CAAE;MACzC;IACF;AAED,WAAO,MAAK;AACV/M,6BAAuB;AACvBE,0BAAoB;AACpBD,gCAA0B;;EAE9B;AAEA,WAAS+M,aAAa/hB,UAAoB0G,SAAiC;AACzE,QAAIsO,yBAAyB;AAC3B,UAAIjV,MAAMiV,wBACRhV,UACA0G,QAAQ5H,IAAK4W,OAAM3O,2BAA2B2O,GAAGxW,MAAM+H,UAAU,CAAC,CAAC;AAErE,aAAOlH,OAAOC,SAASD;IACxB;AACD,WAAOC,SAASD;EAClB;AAEA,WAASsb,mBACPrb,UACA0G,SAAiC;AAEjC,QAAIqO,wBAAwBE,mBAAmB;AAC7C,UAAIlV,MAAMgiB,aAAa/hB,UAAU0G,OAAO;AACxCqO,2BAAqBhV,GAAG,IAAIkV,kBAAiB;IAC9C;EACH;AAEA,WAASoF,uBACPra,UACA0G,SAAiC;AAEjC,QAAIqO,sBAAsB;AACxB,UAAIhV,MAAMgiB,aAAa/hB,UAAU0G,OAAO;AACxC,UAAIob,IAAI/M,qBAAqBhV,GAAG;AAChC,UAAI,OAAO+hB,MAAM,UAAU;AACzB,eAAOA;MACR;IACF;AACD,WAAO;EACT;AAEA,WAASE,mBAAmBC,WAAoC;AAC9Drc,eAAW,CAAA;AACXwO,yBAAqB5O,0BACnByc,WACAvc,oBACAvG,QACAyG,QAAQ;EAEZ;AAEAsQ,WAAS;IACP,IAAI7P,WAAQ;AACV,aAAOA;;IAET,IAAImO,SAAM;AACR,aAAOA;;IAET,IAAItV,QAAK;AACP,aAAOA;;IAET,IAAIuG,SAAM;AACR,aAAO0O;;IAET,IAAIrS,SAAM;AACR,aAAOgS;;IAEToE;IACAjH;IACAyQ;IACApH;IACAqE;IACA1D;;;IAGA1a,YAAaT,QAAWwO,KAAK7N,QAAQF,WAAWT,EAAE;IAClDc,gBAAiBd,QAAWwO,KAAK7N,QAAQG,eAAed,EAAE;IAC1D6gB;IACA5H,eAAe6H;IACf/H;IACAqI;IACAlI;IACAkJ,2BAA2B3K;IAC3B4K,0BAA0BpK;;;IAG1BiK;;AAGF,SAAO9L;AACT;IAOakM,yBAAyBC,OAAO,UAAU;AAoBvC,SAAAC,oBACd7c,QACAyT,MAAiC;AAEjChW,YACEuC,OAAOpG,SAAS,GAChB,kEAAkE;AAGpE,MAAIuG,WAA0B,CAAA;AAC9B,MAAIS,YAAY6S,OAAOA,KAAK7S,WAAW,SAAS;AAChD,MAAIX;AACJ,MAAIwT,QAAI,QAAJA,KAAMxT,oBAAoB;AAC5BA,yBAAqBwT,KAAKxT;EAC3B,WAAUwT,QAAI,QAAJA,KAAMhF,qBAAqB;AAEpC,QAAIA,sBAAsBgF,KAAKhF;AAC/BxO,yBAAsBH,YAAW;MAC/BmO,kBAAkBQ,oBAAoB3O,KAAK;IAC5C;EACF,OAAM;AACLG,yBAAqB+N;EACtB;AAED,MAAIe,SAAMxQ,SAAA;IACRqJ,sBAAsB;IACtBkV,qBAAqB;EAAK,GACtBrJ,OAAOA,KAAK1E,SAAS,IAAI;AAG/B,MAAIL,aAAa3O,0BACfC,QACAC,oBACAvG,QACAyG,QAAQ;AA6BV,iBAAe4c,MACb7G,SAAgB8G,QASV;AAAA,QARN;MACEC;MACAC;MACArO;IAAqB,IAAAmO,WAAA,SAKnB,CAAA,IAAEA;AAEN,QAAI5f,MAAM,IAAIlC,IAAIgb,QAAQ9Y,GAAG;AAC7B,QAAI6Z,SAASf,QAAQe;AACrB,QAAI1c,WAAWC,eAAe,IAAIO,WAAWqC,GAAG,GAAG,MAAM,SAAS;AAClE,QAAI6D,UAAUP,YAAYgO,YAAYnU,UAAUqG,QAAQ;AAGxD,QAAI,CAACuc,cAAclG,MAAM,KAAKA,WAAW,QAAQ;AAC/C,UAAI9X,QAAQ0Q,uBAAuB,KAAK;QAAEoH;MAAQ,CAAA;AAClD,UAAI;QAAEhW,SAASmc;QAAyBtd;MAAO,IAC7CgQ,uBAAuBpB,UAAU;AACnC,aAAO;QACL9N;QACArG;QACA0G,SAASmc;QACT5b,YAAY,CAAA;QACZuP,YAAY;QACZV,QAAQ;UACN,CAACvQ,MAAMO,EAAE,GAAGlB;;QAEdke,YAAYle,MAAM4J;QAClBuU,eAAe,CAAA;QACfC,eAAe,CAAA;QACfjL,iBAAiB;;IAEpB,WAAU,CAACrR,SAAS;AACnB,UAAI9B,QAAQ0Q,uBAAuB,KAAK;QAAEpV,UAAUF,SAASE;MAAQ,CAAE;AACvE,UAAI;QAAEwG,SAAS8U;QAAiBjW;MAAO,IACrCgQ,uBAAuBpB,UAAU;AACnC,aAAO;QACL9N;QACArG;QACA0G,SAAS8U;QACTvU,YAAY,CAAA;QACZuP,YAAY;QACZV,QAAQ;UACN,CAACvQ,MAAMO,EAAE,GAAGlB;;QAEdke,YAAYle,MAAM4J;QAClBuU,eAAe,CAAA;QACfC,eAAe,CAAA;QACfjL,iBAAiB;;IAEpB;AAED,QAAIlP,SAAS,MAAMoa,UACjBtH,SACA3b,UACA0G,SACAgc,gBACApO,yBAAyB,MACzBqO,4BAA4B,MAC5B,IAAI;AAEN,QAAIO,WAAWra,MAAM,GAAG;AACtB,aAAOA;IACR;AAKD,WAAA7E,SAAA;MAAShE;MAAUqG;IAAQ,GAAKwC,MAAM;EACxC;AA4BA,iBAAesa,WACbxH,SAAgByH,QASV;AAAA,QARN;MACEzG;MACA+F;MACApO;IAAqB,IAAA8O,WAAA,SAKnB,CAAA,IAAEA;AAEN,QAAIvgB,MAAM,IAAIlC,IAAIgb,QAAQ9Y,GAAG;AAC7B,QAAI6Z,SAASf,QAAQe;AACrB,QAAI1c,WAAWC,eAAe,IAAIO,WAAWqC,GAAG,GAAG,MAAM,SAAS;AAClE,QAAI6D,UAAUP,YAAYgO,YAAYnU,UAAUqG,QAAQ;AAGxD,QAAI,CAACuc,cAAclG,MAAM,KAAKA,WAAW,UAAUA,WAAW,WAAW;AACvE,YAAMpH,uBAAuB,KAAK;QAAEoH;MAAM,CAAE;IAC7C,WAAU,CAAChW,SAAS;AACnB,YAAM4O,uBAAuB,KAAK;QAAEpV,UAAUF,SAASE;MAAU,CAAA;IAClE;AAED,QAAI8G,QAAQ2V,UACRjW,QAAQ2c,KAAM3N,OAAMA,EAAEnQ,MAAMO,OAAO6W,OAAO,IAC1CF,eAAe/V,SAAS1G,QAAQ;AAEpC,QAAI2c,WAAW,CAAC3V,OAAO;AACrB,YAAMsO,uBAAuB,KAAK;QAChCpV,UAAUF,SAASE;QACnByc;MACD,CAAA;IACF,WAAU,CAAC3V,OAAO;AAEjB,YAAMsO,uBAAuB,KAAK;QAAEpV,UAAUF,SAASE;MAAU,CAAA;IAClE;AAED,QAAI2I,SAAS,MAAMoa,UACjBtH,SACA3b,UACA0G,SACAgc,gBACApO,yBAAyB,MACzB,OACAtN,KAAK;AAGP,QAAIkc,WAAWra,MAAM,GAAG;AACtB,aAAOA;IACR;AAED,QAAIjE,QAAQiE,OAAOiN,SAASrL,OAAO6Y,OAAOza,OAAOiN,MAAM,EAAE,CAAC,IAAI3W;AAC9D,QAAIyF,UAAUzF,QAAW;AAKvB,YAAMyF;IACP;AAGD,QAAIiE,OAAO2N,YAAY;AACrB,aAAO/L,OAAO6Y,OAAOza,OAAO2N,UAAU,EAAE,CAAC;IAC1C;AAED,QAAI3N,OAAO5B,YAAY;AAAA,UAAAsc;AACrB,UAAIpc,OAAOsD,OAAO6Y,OAAOza,OAAO5B,UAAU,EAAE,CAAC;AAC7C,WAAAsc,wBAAI1a,OAAOkP,oBAAPwL,QAAAA,sBAAyBvc,MAAMzB,MAAMO,EAAE,GAAG;AAC5CqB,aAAKib,sBAAsB,IAAIvZ,OAAOkP,gBAAgB/Q,MAAMzB,MAAMO,EAAE;MACrE;AACD,aAAOqB;IACR;AAED,WAAOhI;EACT;AAEA,iBAAe8jB,UACbtH,SACA3b,UACA0G,SACAgc,gBACApO,uBACAqO,yBACAa,YAAyC;AAEzCtgB,cACEyY,QAAQ7L,QACR,sEAAsE;AAGxE,QAAI;AACF,UAAIiK,iBAAiB4B,QAAQe,OAAOtQ,YAAW,CAAE,GAAG;AAClD,YAAIvD,UAAS,MAAM4a,OACjB9H,SACAjV,SACA8c,cAAc/G,eAAe/V,SAAS1G,QAAQ,GAC9C0iB,gBACApO,uBACAqO,yBACAa,cAAc,IAAI;AAEpB,eAAO3a;MACR;AAED,UAAIA,SAAS,MAAM6a,cACjB/H,SACAjV,SACAgc,gBACApO,uBACAqO,yBACAa,UAAU;AAEZ,aAAON,WAAWra,MAAM,IACpBA,SAAM7E,SAAA,CAAA,GAED6E,QAAM;QACT2N,YAAY;QACZwM,eAAe,CAAA;OAChB;aACEvf,GAAG;AAIV,UAAIkgB,gBAAgBlgB,CAAC,KAAKyf,WAAWzf,EAAEoF,MAAM,GAAG;AAC9C,YAAIpF,EAAEsY,SAAS5W,WAAWP,OAAO;AAC/B,gBAAMnB,EAAEoF;QACT;AACD,eAAOpF,EAAEoF;MACV;AAGD,UAAI+a,mBAAmBngB,CAAC,GAAG;AACzB,eAAOA;MACR;AACD,YAAMA;IACP;EACH;AAEA,iBAAeggB,OACb9H,SACAjV,SACA8V,aACAkG,gBACApO,uBACAqO,yBACAkB,gBAAuB;AAEvB,QAAIhb;AAEJ,QAAI,CAAC2T,YAAYjX,MAAMjG,UAAU,CAACkd,YAAYjX,MAAMoQ,MAAM;AACxD,UAAI/Q,QAAQ0Q,uBAAuB,KAAK;QACtCoH,QAAQf,QAAQe;QAChBxc,UAAU,IAAIS,IAAIgb,QAAQ9Y,GAAG,EAAE3C;QAC/Byc,SAASH,YAAYjX,MAAMO;MAC5B,CAAA;AACD,UAAI+d,gBAAgB;AAClB,cAAMjf;MACP;AACDiE,eAAS;QACPkT,MAAM5W,WAAWP;QACjBA;;IAEH,OAAM;AACL,UAAIgY,UAAU,MAAMC,iBAClB,UACAlB,SACA,CAACa,WAAW,GACZ9V,SACAmd,gBACAnB,gBACApO,qBAAqB;AAEvBzL,eAAS+T,QAAQ,CAAC;AAElB,UAAIjB,QAAQ7L,OAAOa,SAAS;AAC1BmT,uCAA+BnI,SAASkI,gBAAgBrP,MAAM;MAC/D;IACF;AAED,QAAIsI,iBAAiBjU,MAAM,GAAG;AAK5B,YAAM,IAAIgG,SAAS,MAAM;QACvBL,QAAQ3F,OAAOsJ,SAAS3D;QACxBC,SAAS;UACPsV,UAAUlb,OAAOsJ,SAAS1D,QAAQiC,IAAI,UAAU;QACjD;MACF,CAAA;IACF;AAED,QAAIuM,iBAAiBpU,MAAM,GAAG;AAC5B,UAAIjE,QAAQ0Q,uBAAuB,KAAK;QAAEyG,MAAM;MAAgB,CAAA;AAChE,UAAI8H,gBAAgB;AAClB,cAAMjf;MACP;AACDiE,eAAS;QACPkT,MAAM5W,WAAWP;QACjBA;;IAEH;AAED,QAAIif,gBAAgB;AAGlB,UAAI3G,cAAcrU,MAAM,GAAG;AACzB,cAAMA,OAAOjE;MACd;AAED,aAAO;QACL8B,SAAS,CAAC8V,WAAW;QACrBvV,YAAY,CAAA;QACZuP,YAAY;UAAE,CAACgG,YAAYjX,MAAMO,EAAE,GAAG+C,OAAO1B;;QAC7C2O,QAAQ;;;QAGRgN,YAAY;QACZC,eAAe,CAAA;QACfC,eAAe,CAAA;QACfjL,iBAAiB;;IAEpB;AAGD,QAAIiM,gBAAgB,IAAIC,QAAQtI,QAAQ9Y,KAAK;MAC3C4L,SAASkN,QAAQlN;MACjBwD,UAAU0J,QAAQ1J;MAClBnC,QAAQ6L,QAAQ7L;IACjB,CAAA;AAED,QAAIoN,cAAcrU,MAAM,GAAG;AAGzB,UAAIsU,gBAAgBwF,0BAChBnG,cACAV,oBAAoBpV,SAAS8V,YAAYjX,MAAMO,EAAE;AAErD,UAAIoe,WAAU,MAAMR,cAClBM,eACAtd,SACAgc,gBACApO,uBACAqO,yBACA,MACA,CAACxF,cAAc5X,MAAMO,IAAI+C,MAAM,CAAC;AAIlC,aAAA7E,SAAA,CAAA,GACKkgB,UAAO;QACVpB,YAAYvQ,qBAAqB1J,OAAOjE,KAAK,IACzCiE,OAAOjE,MAAM4J,SACb3F,OAAOia,cAAc,OACrBja,OAAOia,aACP;QACJtM,YAAY;QACZwM,eAAahf,SAAA,CAAA,GACP6E,OAAO4F,UAAU;UAAE,CAAC+N,YAAYjX,MAAMO,EAAE,GAAG+C,OAAO4F;YAAY,CAAA,CAAE;MACrE,CAAA;IAEJ;AAED,QAAIyV,UAAU,MAAMR,cAClBM,eACAtd,SACAgc,gBACApO,uBACAqO,yBACA,IAAI;AAGN,WAAA3e,SAAA,CAAA,GACKkgB,SAAO;MACV1N,YAAY;QACV,CAACgG,YAAYjX,MAAMO,EAAE,GAAG+C,OAAO1B;MAChC;OAEG0B,OAAOia,aAAa;MAAEA,YAAYja,OAAOia;QAAe,CAAA,GAAE;MAC9DE,eAAena,OAAO4F,UAClB;QAAE,CAAC+N,YAAYjX,MAAMO,EAAE,GAAG+C,OAAO4F;MAAS,IAC1C,CAAA;IAAE,CAAA;EAEV;AAEA,iBAAeiV,cACb/H,SACAjV,SACAgc,gBACApO,uBACAqO,yBACAa,YACA3H,qBAAyC;AAQzC,QAAIgI,iBAAiBL,cAAc;AAGnC,QACEK,kBACA,EAACL,cAAAA,QAAAA,WAAYje,MAAMsQ,WACnB,EAAC2N,cAAAA,QAAAA,WAAYje,MAAMoQ,OACnB;AACA,YAAML,uBAAuB,KAAK;QAChCoH,QAAQf,QAAQe;QAChBxc,UAAU,IAAIS,IAAIgb,QAAQ9Y,GAAG,EAAE3C;QAC/Byc,SAAS6G,cAAU,OAAA,SAAVA,WAAYje,MAAMO;MAC5B,CAAA;IACF;AAED,QAAIiZ,iBAAiByE,aACjB,CAACA,UAAU,IACX3H,uBAAuBqB,cAAcrB,oBAAoB,CAAC,CAAC,IAC3DsI,8BAA8Bzd,SAASmV,oBAAoB,CAAC,CAAC,IAC7DnV;AACJ,QAAI4W,gBAAgByB,eAAelV,OAChC6L,OAAMA,EAAEnQ,MAAMsQ,UAAUH,EAAEnQ,MAAMoQ,IAAI;AAIvC,QAAI2H,cAAcje,WAAW,GAAG;AAC9B,aAAO;QACLqH;;QAEAO,YAAYP,QAAQoD,OAClB,CAACiG,KAAK2F,MAAMjL,OAAO1F,OAAOgL,KAAK;UAAE,CAAC2F,EAAEnQ,MAAMO,EAAE,GAAG;QAAI,CAAE,GACrD,CAAA,CAAE;QAEJgQ,QACE+F,uBAAuBqB,cAAcrB,oBAAoB,CAAC,CAAC,IACvD;UACE,CAACA,oBAAoB,CAAC,CAAC,GAAGA,oBAAoB,CAAC,EAAEjX;QAClD,IACD;QACNke,YAAY;QACZC,eAAe,CAAA;QACfhL,iBAAiB;;IAEpB;AAED,QAAI6E,UAAU,MAAMC,iBAClB,UACAlB,SACA2B,eACA5W,SACAmd,gBACAnB,gBACApO,qBAAqB;AAGvB,QAAIqH,QAAQ7L,OAAOa,SAAS;AAC1BmT,qCAA+BnI,SAASkI,gBAAgBrP,MAAM;IAC/D;AAGD,QAAIuD,kBAAkB,oBAAIrB,IAAG;AAC7B,QAAIwN,UAAUE,uBACZ1d,SACA4W,eACAV,SACAf,qBACA9D,iBACA4K,uBAAuB;AAIzB,QAAI0B,kBAAkB,IAAIhf,IACxBiY,cAAcxe,IAAKkI,WAAUA,MAAMzB,MAAMO,EAAE,CAAC;AAE9CY,YAAQsB,QAAShB,WAAS;AACxB,UAAI,CAACqd,gBAAgB1V,IAAI3H,MAAMzB,MAAMO,EAAE,GAAG;AACxCoe,gBAAQjd,WAAWD,MAAMzB,MAAMO,EAAE,IAAI;MACtC;IACH,CAAC;AAED,WAAA9B,SAAA,CAAA,GACKkgB,SAAO;MACVxd;MACAqR,iBACEA,gBAAgBxG,OAAO,IACnB9G,OAAO6Z,YAAYvM,gBAAgBlZ,QAAO,CAAE,IAC5C;IAAI,CAAA;EAEd;AAIA,iBAAege,iBACbd,MACAJ,SACA2B,eACA5W,SACAmd,gBACAnB,gBACApO,uBAAkD;AAElD,QAAIsI,UAAU,MAAMsD,qBAClB5L,yBAAyBC,qBACzBwH,MACAJ,SACA2B,eACA5W,SACAd,UACAF,oBACAgd,cAAc;AAGhB,WAAO,MAAMlT,QAAQ2Q,IACnBvD,QAAQ9d,IAAI,CAAC+J,QAAQlC,MAAK;AACxB,UAAIyZ,wBAAwBvX,MAAM,GAAG;AACnC,YAAIsJ,WAAWtJ,OAAOA;AAEtB,cAAMwX,yCACJlO,UACAwJ,SACA2B,cAAc3W,CAAC,EAAEpB,MAAMO,IACvBY,SACAL,UACAmO,OAAOnH,oBAAoB;MAE9B;AACD,UAAI6V,WAAWra,OAAOA,MAAM,KAAKgb,gBAAgB;AAG/C,cAAMhb;MACP;AAED,aAAOyX,iCAAiCzX,MAAM;IAChD,CAAC,CAAC;EAEN;AAEA,SAAO;IACLsL;IACAqO;IACAW;;AAEJ;SAYgBoB,0BACd9e,QACAye,SACAtf,OAAU;AAEV,MAAI4f,aAAUxgB,SAAA,CAAA,GACTkgB,SAAO;IACVpB,YAAYvQ,qBAAqB3N,KAAK,IAAIA,MAAM4J,SAAS;IACzDsH,QAAQ;MACN,CAACoO,QAAQO,8BAA8Bhf,OAAO,CAAC,EAAEK,EAAE,GAAGlB;IACvD;GACF;AACD,SAAO4f;AACT;AAEA,SAASV,+BACPnI,SACAkI,gBACArP,QAAiC;AAEjC,MAAIA,OAAO+N,uBAAuB5G,QAAQ7L,OAAO4U,WAAWvlB,QAAW;AACrE,UAAMwc,QAAQ7L,OAAO4U;EACtB;AAED,MAAIhI,SAASmH,iBAAiB,eAAe;AAC7C,QAAM,IAAIxgB,MAASqZ,SAA0Bf,sBAAAA,QAAQe,SAAUf,MAAAA,QAAQ9Y,GAAK;AAC9E;AAEA,SAAS8hB,uBACPzL,MAAgC;AAEhC,SACEA,QAAQ,SACN,cAAcA,QAAQA,KAAKhG,YAAY,QACtC,UAAUgG,QAAQA,KAAK0L,SAASzlB;AAEvC;AAEA,SAASqb,YACPxa,UACA0G,SACAL,UACAwe,iBACA/kB,IACAuN,sBACAoN,aACAC,UAA8B;AAE9B,MAAIoK;AACJ,MAAIC;AACJ,MAAItK,aAAa;AAGfqK,wBAAoB,CAAA;AACpB,aAAS9d,SAASN,SAAS;AACzBoe,wBAAkB7jB,KAAK+F,KAAK;AAC5B,UAAIA,MAAMzB,MAAMO,OAAO2U,aAAa;AAClCsK,2BAAmB/d;AACnB;MACD;IACF;EACF,OAAM;AACL8d,wBAAoBpe;AACpBqe,uBAAmBre,QAAQA,QAAQrH,SAAS,CAAC;EAC9C;AAGD,MAAIwB,OAAO0M,UACTzN,KAAKA,KAAK,KACVsN,oBAAoB0X,mBAAmBzX,oBAAoB,GAC3D/G,cAActG,SAASE,UAAUmG,QAAQ,KAAKrG,SAASE,UACvDwa,aAAa,MAAM;AAMrB,MAAI5a,MAAM,MAAM;AACde,SAAKE,SAASf,SAASe;AACvBF,SAAKG,OAAOhB,SAASgB;EACtB;AAGD,OACGlB,MAAM,QAAQA,OAAO,MAAMA,OAAO,QACnCilB,oBACAA,iBAAiBxf,MAAMvG,SACvB,CAACgmB,mBAAmBnkB,KAAKE,MAAM,GAC/B;AACAF,SAAKE,SAASF,KAAKE,SACfF,KAAKE,OAAOO,QAAQ,OAAO,SAAS,IACpC;EACL;AAMD,MAAIujB,mBAAmBxe,aAAa,KAAK;AACvCxF,SAAKX,WACHW,KAAKX,aAAa,MAAMmG,WAAWsB,UAAU,CAACtB,UAAUxF,KAAKX,QAAQ,CAAC;EACzE;AAED,SAAOM,WAAWK,IAAI;AACxB;AAIA,SAAS+Z,yBACPqK,qBACAC,WACArkB,MACAqY,MAAiC;AAOjC,MAAI,CAACA,QAAQ,CAACyL,uBAAuBzL,IAAI,GAAG;AAC1C,WAAO;MAAErY;;EACV;AAED,MAAIqY,KAAKnG,cAAc,CAAC6P,cAAc1J,KAAKnG,UAAU,GAAG;AACtD,WAAO;MACLlS;MACA+D,OAAO0Q,uBAAuB,KAAK;QAAEoH,QAAQxD,KAAKnG;OAAY;;EAEjE;AAED,MAAIoS,sBAAsBA,OAAO;IAC/BtkB;IACA+D,OAAO0Q,uBAAuB,KAAK;MAAEyG,MAAM;KAAgB;EAC5D;AAGD,MAAIqJ,gBAAgBlM,KAAKnG,cAAc;AACvC,MAAIA,aAAakS,sBACZG,cAAcC,YAAW,IACzBD,cAAchZ,YAAW;AAC9B,MAAI4G,aAAasS,kBAAkBzkB,IAAI;AAEvC,MAAIqY,KAAK0L,SAASzlB,QAAW;AAC3B,QAAI+Z,KAAKjG,gBAAgB,cAAc;AAErC,UAAI,CAAC8G,iBAAiBhH,UAAU,GAAG;AACjC,eAAOoS,oBAAmB;MAC3B;AAED,UAAIhS,OACF,OAAO+F,KAAK0L,SAAS,WACjB1L,KAAK0L,OACL1L,KAAK0L,gBAAgBW,YACrBrM,KAAK0L,gBAAgBY;;QAErBpW,MAAMvB,KAAKqL,KAAK0L,KAAK/lB,QAAO,CAAE,EAAEiL,OAC9B,CAACiG,KAAG0V,UAAA;AAAA,cAAE,CAAC3gB,MAAM3B,KAAK,IAACsiB;AAAA,iBAAA,KAAQ1V,MAAMjL,OAAI,MAAI3B,QAAK;WAC9C,EAAE;UAEJ6H,OAAOkO,KAAK0L,IAAI;AAEtB,aAAO;QACL/jB;QACA8Z,YAAY;UACV5H;UACAC;UACAC,aAAaiG,KAAKjG;UAClBC,UAAU/T;UACVkP,MAAMlP;UACNgU;QACD;;IAEJ,WAAU+F,KAAKjG,gBAAgB,oBAAoB;AAElD,UAAI,CAAC8G,iBAAiBhH,UAAU,GAAG;AACjC,eAAOoS,oBAAmB;MAC3B;AAED,UAAI;AACF,YAAI9W,QACF,OAAO6K,KAAK0L,SAAS,WAAWvkB,KAAKqlB,MAAMxM,KAAK0L,IAAI,IAAI1L,KAAK0L;AAE/D,eAAO;UACL/jB;UACA8Z,YAAY;YACV5H;YACAC;YACAC,aAAaiG,KAAKjG;YAClBC,UAAU/T;YACVkP,MAAAA;YACA8E,MAAMhU;UACP;;eAEIsE,GAAG;AACV,eAAO0hB,oBAAmB;MAC3B;IACF;EACF;AAEDjiB,YACE,OAAOqiB,aAAa,YACpB,+CAA+C;AAGjD,MAAII;AACJ,MAAIzS;AAEJ,MAAIgG,KAAKhG,UAAU;AACjByS,mBAAeC,8BAA8B1M,KAAKhG,QAAQ;AAC1DA,eAAWgG,KAAKhG;EACjB,WAAUgG,KAAK0L,gBAAgBW,UAAU;AACxCI,mBAAeC,8BAA8B1M,KAAK0L,IAAI;AACtD1R,eAAWgG,KAAK0L;EACjB,WAAU1L,KAAK0L,gBAAgBY,iBAAiB;AAC/CG,mBAAezM,KAAK0L;AACpB1R,eAAW2S,8BAA8BF,YAAY;EACtD,WAAUzM,KAAK0L,QAAQ,MAAM;AAC5Be,mBAAe,IAAIH,gBAAe;AAClCtS,eAAW,IAAIqS,SAAQ;EACxB,OAAM;AACL,QAAI;AACFI,qBAAe,IAAIH,gBAAgBtM,KAAK0L,IAAI;AAC5C1R,iBAAW2S,8BAA8BF,YAAY;aAC9CliB,GAAG;AACV,aAAO0hB,oBAAmB;IAC3B;EACF;AAED,MAAIxK,aAAyB;IAC3B5H;IACAC;IACAC,aACGiG,QAAQA,KAAKjG,eAAgB;IAChCC;IACA7E,MAAMlP;IACNgU,MAAMhU;;AAGR,MAAI4a,iBAAiBY,WAAW5H,UAAU,GAAG;AAC3C,WAAO;MAAElS;MAAM8Z;;EAChB;AAGD,MAAIzW,aAAapD,UAAUD,IAAI;AAI/B,MAAIqkB,aAAahhB,WAAWnD,UAAUikB,mBAAmB9gB,WAAWnD,MAAM,GAAG;AAC3E4kB,iBAAaG,OAAO,SAAS,EAAE;EAChC;AACD5hB,aAAWnD,SAAM,MAAO4kB;AAExB,SAAO;IAAE9kB,MAAML,WAAW0D,UAAU;IAAGyW;;AACzC;AAIA,SAASwJ,8BACPzd,SACAqf,YAAkB;AAElB,MAAIC,kBAAkBtf;AACtB,MAAIqf,YAAY;AACd,QAAI/mB,QAAQ0H,QAAQuP,UAAWP,OAAMA,EAAEnQ,MAAMO,OAAOigB,UAAU;AAC9D,QAAI/mB,SAAS,GAAG;AACdgnB,wBAAkBtf,QAAQ1D,MAAM,GAAGhE,KAAK;IACzC;EACF;AACD,SAAOgnB;AACT;AAEA,SAASxI,iBACP/c,SACAvB,OACAwH,SACAiU,YACA3a,UACAimB,eACAC,6BACA9O,wBACAC,yBACAC,uBACAQ,iBACAF,kBACAD,kBACA2D,aACAjV,UACAwV,qBAAyC;AAEzC,MAAIG,eAAeH,sBACfqB,cAAcrB,oBAAoB,CAAC,CAAC,IAClCA,oBAAoB,CAAC,EAAEjX,QACvBiX,oBAAoB,CAAC,EAAE1U,OACzBhI;AACJ,MAAIgnB,aAAa1lB,QAAQC,UAAUxB,MAAMc,QAAQ;AACjD,MAAIomB,UAAU3lB,QAAQC,UAAUV,QAAQ;AAGxC,MAAI+lB,aACFlK,uBAAuBqB,cAAcrB,oBAAoB,CAAC,CAAC,IACvDA,oBAAoB,CAAC,IACrB1c;AACN,MAAI6mB,kBAAkBD,aAClB5B,8BAA8Bzd,SAASqf,UAAU,IACjDrf;AAKJ,MAAI2f,eAAexK,sBACfA,oBAAoB,CAAC,EAAEiH,aACvB3jB;AACJ,MAAImnB,yBACFJ,+BAA+BG,gBAAgBA,gBAAgB;AAEjE,MAAIE,oBAAoBP,gBAAgBnc,OAAO,CAAC7C,OAAOhI,UAAS;AAC9D,QAAI;MAAEuG;IAAO,IAAGyB;AAChB,QAAIzB,MAAMoQ,MAAM;AAEd,aAAO;IACR;AAED,QAAIpQ,MAAMsQ,UAAU,MAAM;AACxB,aAAO;IACR;AAED,QAAIoQ,eAAe;AACjB,UAAI,OAAO1gB,MAAMsQ,WAAW,cAActQ,MAAMsQ,OAAOG,SAAS;AAC9D,eAAO;MACR;AACD,aACE9W,MAAM+H,WAAW1B,MAAMO,EAAE,MAAM3G;OAE9B,CAACD,MAAM4W,UAAU5W,MAAM4W,OAAOvQ,MAAMO,EAAE,MAAM3G;IAEhD;AAGD,QACEqnB,YAAYtnB,MAAM+H,YAAY/H,MAAMwH,QAAQ1H,KAAK,GAAGgI,KAAK,KACzDqQ,wBAAwBzN,KAAM9D,QAAOA,OAAOkB,MAAMzB,MAAMO,EAAE,GAC1D;AACA,aAAO;IACR;AAMD,QAAI2gB,oBAAoBvnB,MAAMwH,QAAQ1H,KAAK;AAC3C,QAAI0nB,iBAAiB1f;AAErB,WAAO2f,uBAAuB3f,OAAKhD,SAAA;MACjCmiB;MACAS,eAAeH,kBAAkBvf;MACjCkf;MACAS,YAAYH,eAAexf;IAAM,GAC9ByT,YAAU;MACbqB;MACA8K,uBAAuBT;MACvBU,yBAAyBT,yBACrB;;QAEAlP,0BACA+O,WAAWjmB,WAAWimB,WAAWplB,WAC/BqlB,QAAQlmB,WAAWkmB,QAAQrlB;QAE7BolB,WAAWplB,WAAWqlB,QAAQrlB,UAC9BimB,mBAAmBP,mBAAmBC,cAAc;;IAAC,CAAA,CAC1D;EACH,CAAC;AAGD,MAAInJ,uBAA8C,CAAA;AAClD3F,mBAAiB5P,QAAQ,CAACgW,GAAGje,QAAO;AAMlC,QACEkmB,iBACA,CAACvf,QAAQkD,KAAM8L,OAAMA,EAAEnQ,MAAMO,OAAOkY,EAAErB,OAAO,KAC7C7E,gBAAgBnJ,IAAI5O,GAAG,GACvB;AACA;IACD;AAED,QAAIknB,iBAAiB9gB,YAAYmV,aAAa0C,EAAEnd,MAAMwF,QAAQ;AAM9D,QAAI,CAAC4gB,gBAAgB;AACnB1J,2BAAqBtc,KAAK;QACxBlB;QACA4c,SAASqB,EAAErB;QACX9b,MAAMmd,EAAEnd;QACR6F,SAAS;QACTM,OAAO;QACP0I,YAAY;MACb,CAAA;AACD;IACD;AAKD,QAAI2J,UAAUna,MAAMuX,SAAS/F,IAAI3Q,GAAG;AACpC,QAAImnB,eAAezK,eAAewK,gBAAgBjJ,EAAEnd,IAAI;AAExD,QAAIsmB,mBAAmB;AACvB,QAAIxP,iBAAiBhJ,IAAI5O,GAAG,GAAG;AAE7BonB,yBAAmB;eACV7P,sBAAsBpP,SAASnI,GAAG,GAAG;AAE9ConB,yBAAmB;IACpB,WACC9N,WACAA,QAAQna,UAAU,UAClBma,QAAQlS,SAAShI,QACjB;AAIAgoB,yBAAmB/P;IACpB,OAAM;AAGL+P,yBAAmBR,uBAAuBO,cAAYljB,SAAA;QACpDmiB;QACAS,eAAe1nB,MAAMwH,QAAQxH,MAAMwH,QAAQrH,SAAS,CAAC,EAAE6H;QACvDkf;QACAS,YAAYngB,QAAQA,QAAQrH,SAAS,CAAC,EAAE6H;MAAM,GAC3CyT,YAAU;QACbqB;QACA8K,uBAAuBT;QACvBU,yBAAyBT,yBACrB,QACAlP;MAAsB,CAAA,CAC3B;IACF;AAED,QAAI+P,kBAAkB;AACpB5J,2BAAqBtc,KAAK;QACxBlB;QACA4c,SAASqB,EAAErB;QACX9b,MAAMmd,EAAEnd;QACR6F,SAASugB;QACTjgB,OAAOkgB;QACPxX,YAAY,IAAIC,gBAAe;MAChC,CAAA;IACF;EACH,CAAC;AAED,SAAO,CAAC4W,mBAAmBhJ,oBAAoB;AACjD;AAEA,SAASiJ,YACPY,mBACAC,cACArgB,OAA6B;AAE7B,MAAIsgB;;IAEF,CAACD;IAEDrgB,MAAMzB,MAAMO,OAAOuhB,aAAa9hB,MAAMO;;AAIxC,MAAIyhB,gBAAgBH,kBAAkBpgB,MAAMzB,MAAMO,EAAE,MAAM3G;AAG1D,SAAOmoB,SAASC;AAClB;AAEA,SAASP,mBACPK,cACArgB,OAA6B;AAE7B,MAAIwgB,cAAcH,aAAa9hB,MAAM1E;AACrC;;IAEEwmB,aAAannB,aAAa8G,MAAM9G;;IAG/BsnB,eAAe,QACdA,YAAY9e,SAAS,GAAG,KACxB2e,aAAangB,OAAO,GAAG,MAAMF,MAAME,OAAO,GAAG;;AAEnD;AAEA,SAASyf,uBACPc,aACAC,KAAiC;AAEjC,MAAID,YAAYliB,MAAM4hB,kBAAkB;AACtC,QAAIQ,cAAcF,YAAYliB,MAAM4hB,iBAAiBO,GAAG;AACxD,QAAI,OAAOC,gBAAgB,WAAW;AACpC,aAAOA;IACR;EACF;AAED,SAAOD,IAAIX;AACb;AAOA,eAAea,oBACbriB,OACAG,oBACAE,UAAuB;AAEvB,MAAI,CAACL,MAAMoQ,MAAM;AACf;EACD;AAED,MAAIkS,YAAY,MAAMtiB,MAAMoQ,KAAI;AAKhC,MAAI,CAACpQ,MAAMoQ,MAAM;AACf;EACD;AAED,MAAImS,gBAAgBliB,SAASL,MAAMO,EAAE;AACrC5C,YAAU4kB,eAAe,4BAA4B;AAUrD,MAAIC,eAAoC,CAAA;AACxC,WAASC,qBAAqBH,WAAW;AACvC,QAAII,mBACFH,cAAcE,iBAA+C;AAE/D,QAAIE,8BACFD,qBAAqB9oB;;IAGrB6oB,sBAAsB;AAExB7nB,YACE,CAAC+nB,6BACD,YAAUJ,cAAchiB,KAAE,8BAA4BkiB,oBAAiB,mFAEzCA,8BAAAA,oBAAiB,qBAAoB;AAGrE,QACE,CAACE,+BACD,CAAC9iB,mBAAmBuJ,IAAIqZ,iBAAsC,GAC9D;AACAD,mBAAaC,iBAAiB,IAC5BH,UAAUG,iBAA2C;IACxD;EACF;AAIDvd,SAAO1F,OAAO+iB,eAAeC,YAAY;AAKzCtd,SAAO1F,OAAO+iB,eAAa9jB,SAKtB0B,CAAAA,GAAAA,mBAAmBoiB,aAAa,GAAC;IACpCnS,MAAMxW;EAAS,CAAA,CAChB;AACH;AAGA,SAASoV,oBACP2E,MAA8B;AAE9B,SAAO1J,QAAQ2Q,IAAIjH,KAAKxS,QAAQ5H,IAAK4W,OAAMA,EAAEpE,QAAO,CAAE,CAAC;AACzD;AAEA,eAAe4O,qBACb7L,kBACA0H,MACAJ,SACA2B,eACA5W,SACAd,UACAF,oBACAgd,gBAAwB;AAExB,MAAIyF,iBAAiB7K,cAAcxT,OACjC,CAACiG,KAAK2F,MAAM3F,IAAII,IAAIuF,EAAEnQ,MAAMO,EAAE,GAC9B,oBAAIT,IAAG,CAAU;AAEnB,MAAI+iB,gBAAgB,oBAAI/iB,IAAG;AAK3B,MAAIuX,UAAU,MAAMvI,iBAAiB;IACnC3N,SAASA,QAAQ5H,IAAKkI,WAAS;AAC7B,UAAIqhB,aAAaF,eAAexZ,IAAI3H,MAAMzB,MAAMO,EAAE;AAKlD,UAAIwL,UAAyCgX,qBAAmB;AAC9DF,sBAAcjY,IAAInJ,MAAMzB,MAAMO,EAAE;AAChC,eAAOuiB,aACHE,mBACExM,MACAJ,SACA3U,OACApB,UACAF,oBACA4iB,iBACA5F,cAAc,IAEhBlT,QAAQ8B,QAAQ;UAAEyK,MAAM5W,WAAWgC;UAAM0B,QAAQ1J;QAAS,CAAE;;AAGlE,aAAA6E,SAAA,CAAA,GACKgD,OAAK;QACRqhB;QACA/W;MAAO,CAAA;IAEX,CAAC;IACDqK;IACAzU,QAAQR,QAAQ,CAAC,EAAEQ;IACnBgd,SAASxB;EACV,CAAA;AAIDhc,UAAQsB,QAAS0N,OACfxS,UACEklB,cAAczZ,IAAI+G,EAAEnQ,MAAMO,EAAE,GAC5B,oDAAoD4P,EAAEnQ,MAAMO,KAC1D,sHAC0D,CAC7D;AAIH,SAAO8W,QAAQ/S,OAAO,CAACmC,GAAGrF,MAAMwhB,eAAexZ,IAAIjI,QAAQC,CAAC,EAAEpB,MAAMO,EAAE,CAAC;AACzE;AAGA,eAAeyiB,mBACbxM,MACAJ,SACA3U,OACApB,UACAF,oBACA4iB,iBACAE,eAAuB;AAEvB,MAAI3f;AACJ,MAAI4f;AAEJ,MAAIC,aACFC,aAC0B;AAE1B,QAAIrZ;AAGJ,QAAIC,eAAe,IAAIC,QAAuB,CAACxD,GAAGyD,MAAOH,SAASG,CAAE;AACpEgZ,eAAWA,MAAMnZ,OAAM;AACvBqM,YAAQ7L,OAAO7K,iBAAiB,SAASwjB,QAAQ;AAEjD,QAAIG,gBAAiBC,SAAiB;AACpC,UAAI,OAAOF,YAAY,YAAY;AACjC,eAAOnZ,QAAQF,OACb,IAAIjM,MACF,sEAAA,MACM0Y,OAAI,iBAAe/U,MAAMzB,MAAMO,KAAE,IAAG,CAC3C;MAEJ;AACD,aAAO6iB,QACL;QACEhN;QACAzU,QAAQF,MAAME;QACdgd,SAASsE;MACV,GACD,GAAIK,QAAQ1pB,SAAY,CAAC0pB,GAAG,IAAI,CAAA,CAAG;;AAIvC,QAAIC;AACJ,QAAIR,iBAAiB;AACnBQ,uBAAiBR,gBAAiBO,SAAiBD,cAAcC,GAAG,CAAC;IACtE,OAAM;AACLC,wBAAkB,YAAW;AAC3B,YAAI;AACF,cAAIC,MAAM,MAAMH,cAAa;AAC7B,iBAAO;YAAE7M,MAAM;YAAQlT,QAAQkgB;;iBACxBtlB,GAAG;AACV,iBAAO;YAAEsY,MAAM;YAASlT,QAAQpF;;QACjC;MACH,GAAC;IACF;AAED,WAAO+L,QAAQa,KAAK,CAACyY,gBAAgBvZ,YAAY,CAAC;;AAGpD,MAAI;AACF,QAAIoZ,UAAU3hB,MAAMzB,MAAMwW,IAAI;AAE9B,QAAI/U,MAAMzB,MAAMoQ,MAAM;AACpB,UAAIgT,SAAS;AAEX,YAAIK;AACJ,YAAI,CAAC7lB,KAAK,IAAI,MAAMqM,QAAQ2Q,IAAI;;;;UAI9BuI,WAAWC,OAAO,EAAEnY,MAAO/M,OAAK;AAC9BulB,2BAAevlB;UACjB,CAAC;UACDmkB,oBAAoB5gB,MAAMzB,OAAOG,oBAAoBE,QAAQ;QAAC,CAC/D;AACD,YAAIojB,iBAAiB7pB,QAAW;AAC9B,gBAAM6pB;QACP;AACDngB,iBAAS1F;MACV,OAAM;AAEL,cAAMykB,oBAAoB5gB,MAAMzB,OAAOG,oBAAoBE,QAAQ;AAEnE+iB,kBAAU3hB,MAAMzB,MAAMwW,IAAI;AAC1B,YAAI4M,SAAS;AAIX9f,mBAAS,MAAM6f,WAAWC,OAAO;QAClC,WAAU5M,SAAS,UAAU;AAC5B,cAAIlZ,MAAM,IAAIlC,IAAIgb,QAAQ9Y,GAAG;AAC7B,cAAI3C,WAAW2C,IAAI3C,WAAW2C,IAAI9B;AAClC,gBAAMuU,uBAAuB,KAAK;YAChCoH,QAAQf,QAAQe;YAChBxc;YACAyc,SAAS3V,MAAMzB,MAAMO;UACtB,CAAA;QACF,OAAM;AAGL,iBAAO;YAAEiW,MAAM5W,WAAWgC;YAAM0B,QAAQ1J;;QACzC;MACF;IACF,WAAU,CAACwpB,SAAS;AACnB,UAAI9lB,MAAM,IAAIlC,IAAIgb,QAAQ9Y,GAAG;AAC7B,UAAI3C,WAAW2C,IAAI3C,WAAW2C,IAAI9B;AAClC,YAAMuU,uBAAuB,KAAK;QAChCpV;MACD,CAAA;IACF,OAAM;AACL2I,eAAS,MAAM6f,WAAWC,OAAO;IAClC;AAEDzlB,cACE2F,OAAOA,WAAW1J,QAClB,kBAAe4c,SAAS,WAAW,cAAc,cAC3C/U,iBAAAA,MAAAA,MAAMzB,MAAMO,KAA8CiW,8CAAAA,OAAS,QAAA,4CACzB;WAE3CtY,GAAG;AAIV,WAAO;MAAEsY,MAAM5W,WAAWP;MAAOiE,QAAQpF;;EAC1C,UAAA;AACC,QAAIglB,UAAU;AACZ9M,cAAQ7L,OAAO5K,oBAAoB,SAASujB,QAAQ;IACrD;EACF;AAED,SAAO5f;AACT;AAEA,eAAeyX,iCACb2I,eAA4B;AAE5B,MAAI;IAAEpgB;IAAQkT;IAAMvN;EAAM,IAAKya;AAE/B,MAAI/F,WAAWra,MAAM,GAAG;AACtB,QAAI1B;AAEJ,QAAI;AACF,UAAI+hB,cAAcrgB,OAAO4F,QAAQiC,IAAI,cAAc;AAGnD,UAAIwY,eAAe,wBAAwBlf,KAAKkf,WAAW,GAAG;AAC5D,YAAIrgB,OAAO+b,QAAQ,MAAM;AACvBzd,iBAAO;QACR,OAAM;AACLA,iBAAO,MAAM0B,OAAOwF,KAAI;QACzB;MACF,OAAM;AACLlH,eAAO,MAAM0B,OAAOsK,KAAI;MACzB;aACM1P,GAAG;AACV,aAAO;QAAEsY,MAAM5W,WAAWP;QAAOA,OAAOnB;;IACzC;AAED,QAAIsY,SAAS5W,WAAWP,OAAO;AAC7B,aAAO;QACLmX,MAAM5W,WAAWP;QACjBA,OAAO,IAAIwN,kBAAkBvJ,OAAO2F,QAAQ3F,OAAOwJ,YAAYlL,IAAI;QACnE2b,YAAYja,OAAO2F;QACnBC,SAAS5F,OAAO4F;;IAEnB;AAED,WAAO;MACLsN,MAAM5W,WAAWgC;MACjBA;MACA2b,YAAYja,OAAO2F;MACnBC,SAAS5F,OAAO4F;;EAEnB;AAED,MAAIsN,SAAS5W,WAAWP,OAAO;AAC7B,WAAO;MACLmX,MAAM5W,WAAWP;MACjBA,OAAOiE;MACPia,YAAYvQ,qBAAqB1J,MAAM,IAAIA,OAAO2F,SAASA;;EAE9D;AAED,MAAI2a,eAAetgB,MAAM,GAAG;AAAA,QAAAugB,cAAAC;AAC1B,WAAO;MACLtN,MAAM5W,WAAWmkB;MACjB/K,cAAc1V;MACdia,aAAUsG,eAAEvgB,OAAOyF,SAAI,OAAA,SAAX8a,aAAa5a;MACzBC,WAAS4a,gBAAAxgB,OAAOyF,SAAP+a,OAAAA,SAAAA,cAAa5a,YAAW,IAAIC,QAAQ7F,OAAOyF,KAAKG,OAAO;;EAEnE;AAED,SAAO;IAAEsN,MAAM5W,WAAWgC;IAAMA,MAAM0B;IAAQia,YAAYtU;;AAC5D;AAGA,SAAS6R,yCACPlO,UACAwJ,SACAgB,SACAjW,SACAL,UACAgH,sBAA6B;AAE7B,MAAIrN,WAAWmS,SAAS1D,QAAQiC,IAAI,UAAU;AAC9CxN,YACElD,UACA,4EAA4E;AAG9E,MAAI,CAACwT,mBAAmBxJ,KAAKhK,QAAQ,GAAG;AACtC,QAAIupB,iBAAiB7iB,QAAQ1D,MAC3B,GACA0D,QAAQuP,UAAWP,OAAMA,EAAEnQ,MAAMO,OAAO6W,OAAO,IAAI,CAAC;AAEtD3c,eAAWwa,YACT,IAAI7Z,IAAIgb,QAAQ9Y,GAAG,GACnB0mB,gBACAljB,UACA,MACArG,UACAqN,oBAAoB;AAEtB8E,aAAS1D,QAAQG,IAAI,YAAY5O,QAAQ;EAC1C;AAED,SAAOmS;AACT;AAEA,SAAS4K,0BACP/c,UACAmmB,YACA9f,UAAgB;AAEhB,MAAImN,mBAAmBxJ,KAAKhK,QAAQ,GAAG;AAErC,QAAIwpB,qBAAqBxpB;AACzB,QAAI6C,MAAM2mB,mBAAmBlnB,WAAW,IAAI,IACxC,IAAI3B,IAAIwlB,WAAWsD,WAAWD,kBAAkB,IAChD,IAAI7oB,IAAI6oB,kBAAkB;AAC9B,QAAIE,iBAAiBpjB,cAAczD,IAAI3C,UAAUmG,QAAQ,KAAK;AAC9D,QAAIxD,IAAImC,WAAWmhB,WAAWnhB,UAAU0kB,gBAAgB;AACtD,aAAO7mB,IAAI3C,WAAW2C,IAAI9B,SAAS8B,IAAI7B;IACxC;EACF;AACD,SAAOhB;AACT;AAKA,SAAS4b,wBACPnb,SACAT,UACA8P,QACA6K,YAAuB;AAEvB,MAAI9X,MAAMpC,QAAQC,UAAU4kB,kBAAkBtlB,QAAQ,CAAC,EAAE4D,SAAQ;AACjE,MAAI0K,OAAoB;IAAEwB;;AAE1B,MAAI6K,cAAcZ,iBAAiBY,WAAW5H,UAAU,GAAG;AACzD,QAAI;MAAEA;MAAYE;IAAa,IAAG0H;AAIlCrM,SAAKoO,SAAS3J,WAAWsS,YAAW;AAEpC,QAAIpS,gBAAgB,oBAAoB;AACtC3E,WAAKG,UAAU,IAAIC,QAAQ;QAAE,gBAAgBuE;MAAa,CAAA;AAC1D3E,WAAKsW,OAAOvkB,KAAKC,UAAUqa,WAAWtM,IAAI;IAC3C,WAAU4E,gBAAgB,cAAc;AAEvC3E,WAAKsW,OAAOjK,WAAWxH;eAEvBF,gBAAgB,uCAChB0H,WAAWzH,UACX;AAEA5E,WAAKsW,OAAOgB,8BAA8BjL,WAAWzH,QAAQ;IAC9D,OAAM;AAEL5E,WAAKsW,OAAOjK,WAAWzH;IACxB;EACF;AAED,SAAO,IAAI+Q,QAAQphB,KAAKyL,IAAI;AAC9B;AAEA,SAASsX,8BAA8B1S,UAAkB;AACvD,MAAIyS,eAAe,IAAIH,gBAAe;AAEtC,WAAS,CAACzlB,KAAKoD,KAAK,KAAK+P,SAASrU,QAAO,GAAI;AAE3C8mB,iBAAaG,OAAO/lB,KAAK,OAAOoD,UAAU,WAAWA,QAAQA,MAAM2B,IAAI;EACxE;AAED,SAAO6gB;AACT;AAEA,SAASE,8BACPF,cAA6B;AAE7B,MAAIzS,WAAW,IAAIqS,SAAQ;AAC3B,WAAS,CAACxlB,KAAKoD,KAAK,KAAKwiB,aAAa9mB,QAAO,GAAI;AAC/CqU,aAAS4S,OAAO/lB,KAAKoD,KAAK;EAC3B;AACD,SAAO+P;AACT;AAEA,SAASkR,uBACP1d,SACA4W,eACAV,SACAf,qBACA9D,iBACA4K,yBAAgC;AAQhC,MAAI1b,aAAwC,CAAA;AAC5C,MAAI6O,SAAuC;AAC3C,MAAIgN;AACJ,MAAI6G,aAAa;AACjB,MAAI5G,gBAAyC,CAAA;AAC7C,MAAIjI,eACFe,uBAAuBqB,cAAcrB,oBAAoB,CAAC,CAAC,IACvDA,oBAAoB,CAAC,EAAEjX,QACvBzF;AAGNyd,UAAQ5U,QAAQ,CAACa,QAAQ7J,UAAS;AAChC,QAAI8G,KAAKwX,cAActe,KAAK,EAAEuG,MAAMO;AACpC5C,cACE,CAAC4Z,iBAAiBjU,MAAM,GACxB,qDAAqD;AAEvD,QAAIqU,cAAcrU,MAAM,GAAG;AACzB,UAAIjE,QAAQiE,OAAOjE;AAInB,UAAIkW,iBAAiB3b,QAAW;AAC9ByF,gBAAQkW;AACRA,uBAAe3b;MAChB;AAED2W,eAASA,UAAU,CAAA;AAEnB,UAAI6M,yBAAyB;AAC3B7M,eAAOhQ,EAAE,IAAIlB;MACd,OAAM;AAIL,YAAIuY,gBAAgBrB,oBAAoBpV,SAASZ,EAAE;AACnD,YAAIgQ,OAAOqH,cAAc5X,MAAMO,EAAE,KAAK,MAAM;AAC1CgQ,iBAAOqH,cAAc5X,MAAMO,EAAE,IAAIlB;QAClC;MACF;AAGDqC,iBAAWnB,EAAE,IAAI3G;AAIjB,UAAI,CAACwqB,YAAY;AACfA,qBAAa;AACb7G,qBAAavQ,qBAAqB1J,OAAOjE,KAAK,IAC1CiE,OAAOjE,MAAM4J,SACb;MACL;AACD,UAAI3F,OAAO4F,SAAS;AAClBsU,sBAAcjd,EAAE,IAAI+C,OAAO4F;MAC5B;IACF,OAAM;AACL,UAAIwO,iBAAiBpU,MAAM,GAAG;AAC5BkP,wBAAgBnJ,IAAI9I,IAAI+C,OAAO0V,YAAY;AAC3CtX,mBAAWnB,EAAE,IAAI+C,OAAO0V,aAAapX;AAGrC,YACE0B,OAAOia,cAAc,QACrBja,OAAOia,eAAe,OACtB,CAAC6G,YACD;AACA7G,uBAAaja,OAAOia;QACrB;AACD,YAAIja,OAAO4F,SAAS;AAClBsU,wBAAcjd,EAAE,IAAI+C,OAAO4F;QAC5B;MACF,OAAM;AACLxH,mBAAWnB,EAAE,IAAI+C,OAAO1B;AAGxB,YAAI0B,OAAOia,cAAcja,OAAOia,eAAe,OAAO,CAAC6G,YAAY;AACjE7G,uBAAaja,OAAOia;QACrB;AACD,YAAIja,OAAO4F,SAAS;AAClBsU,wBAAcjd,EAAE,IAAI+C,OAAO4F;QAC5B;MACF;IACF;EACH,CAAC;AAKD,MAAIqM,iBAAiB3b,UAAa0c,qBAAqB;AACrD/F,aAAS;MAAE,CAAC+F,oBAAoB,CAAC,CAAC,GAAGf;;AACrC7T,eAAW4U,oBAAoB,CAAC,CAAC,IAAI1c;EACtC;AAED,SAAO;IACL8H;IACA6O;IACAgN,YAAYA,cAAc;IAC1BC;;AAEJ;AAEA,SAASzE,kBACPpf,OACAwH,SACA4W,eACAV,SACAf,qBACA0B,sBACAW,gBACAnG,iBAA0C;AAK1C,MAAI;IAAE9Q;IAAY6O;MAAWsO;IAC3B1d;IACA4W;IACAV;IACAf;IACA9D;IACA;;;AAIF,WAAS/Y,QAAQ,GAAGA,QAAQue,qBAAqBle,QAAQL,SAAS;AAChE,QAAI;MAAEe;MAAKiH;MAAO0I;IAAY,IAAG6N,qBAAqBve,KAAK;AAC3DkE,cACEgb,mBAAmB/e,UAAa+e,eAAelf,KAAK,MAAMG,QAC1D,2CAA2C;AAE7C,QAAI0J,SAASqV,eAAelf,KAAK;AAGjC,QAAI0Q,cAAcA,WAAWI,OAAOa,SAAS;AAE3C;IACD,WAAUuM,cAAcrU,MAAM,GAAG;AAChC,UAAIsU,gBAAgBrB,oBAAoB5c,MAAMwH,SAASM,SAAK,OAAA,SAALA,MAAOzB,MAAMO,EAAE;AACtE,UAAI,EAAEgQ,UAAUA,OAAOqH,cAAc5X,MAAMO,EAAE,IAAI;AAC/CgQ,iBAAM9R,SAAA,CAAA,GACD8R,QAAM;UACT,CAACqH,cAAc5X,MAAMO,EAAE,GAAG+C,OAAOjE;SAClC;MACF;AACD1F,YAAMuX,SAAS7F,OAAO7Q,GAAG;IAC1B,WAAU+c,iBAAiBjU,MAAM,GAAG;AAGnC3F,gBAAU,OAAO,yCAAyC;IAC3D,WAAU+Z,iBAAiBpU,MAAM,GAAG;AAGnC3F,gBAAU,OAAO,iCAAiC;IACnD,OAAM;AACL,UAAI0c,cAAcL,eAAe1W,OAAO1B,IAAI;AAC5CjI,YAAMuX,SAAS7H,IAAI7O,KAAK6f,WAAW;IACpC;EACF;AAED,SAAO;IAAE3Y;IAAY6O;;AACvB;AAEA,SAASoE,gBACPjT,YACA2iB,eACAljB,SACAoP,QAAoC;AAEpC,MAAI+T,mBAAgB7lB,SAAA,CAAA,GAAQ4lB,aAAa;AACzC,WAAS5iB,SAASN,SAAS;AACzB,QAAIZ,KAAKkB,MAAMzB,MAAMO;AACrB,QAAI8jB,cAAcE,eAAehkB,EAAE,GAAG;AACpC,UAAI8jB,cAAc9jB,EAAE,MAAM3G,QAAW;AACnC0qB,yBAAiB/jB,EAAE,IAAI8jB,cAAc9jB,EAAE;MACxC;IAKF,WAAUmB,WAAWnB,EAAE,MAAM3G,UAAa6H,MAAMzB,MAAMsQ,QAAQ;AAG7DgU,uBAAiB/jB,EAAE,IAAImB,WAAWnB,EAAE;IACrC;AAED,QAAIgQ,UAAUA,OAAOgU,eAAehkB,EAAE,GAAG;AAEvC;IACD;EACF;AACD,SAAO+jB;AACT;AAEA,SAASvN,uBACPT,qBAAoD;AAEpD,MAAI,CAACA,qBAAqB;AACxB,WAAO,CAAA;EACR;AACD,SAAOqB,cAAcrB,oBAAoB,CAAC,CAAC,IACvC;;IAEErF,YAAY,CAAA;EACb,IACD;IACEA,YAAY;MACV,CAACqF,oBAAoB,CAAC,CAAC,GAAGA,oBAAoB,CAAC,EAAE1U;IAClD;;AAET;AAKA,SAAS2U,oBACPpV,SACAiW,SAAgB;AAEhB,MAAIoN,kBAAkBpN,UAClBjW,QAAQ1D,MAAM,GAAG0D,QAAQuP,UAAWP,OAAMA,EAAEnQ,MAAMO,OAAO6W,OAAO,IAAI,CAAC,IACrE,CAAC,GAAGjW,OAAO;AACf,SACEqjB,gBAAgBC,QAAO,EAAG3G,KAAM3N,OAAMA,EAAEnQ,MAAMmO,qBAAqB,IAAI,KACvEhN,QAAQ,CAAC;AAEb;AAEA,SAAS6O,uBAAuB9P,QAAiC;AAK/D,MAAIF,QACFE,OAAOpG,WAAW,IACdoG,OAAO,CAAC,IACRA,OAAO4d,KAAM5T,OAAMA,EAAEzQ,SAAS,CAACyQ,EAAE5O,QAAQ4O,EAAE5O,SAAS,GAAG,KAAK;IAC1DiF,IAAE;;AAGV,SAAO;IACLY,SAAS,CACP;MACEQ,QAAQ,CAAA;MACRhH,UAAU;MACVwK,cAAc;MACdnF;IACD,CAAA;IAEHA;;AAEJ;AAEA,SAAS+P,uBACP9G,QAAcyb,QAWR;AAAA,MAVN;IACE/pB;IACAyc;IACAD;IACAX;0BAME,CAAA,IAAEkO;AAEN,MAAI5X,aAAa;AACjB,MAAI6X,eAAe;AAEnB,MAAI1b,WAAW,KAAK;AAClB6D,iBAAa;AACb,QAAIqK,UAAUxc,YAAYyc,SAAS;AACjCuN,qBACE,gBAAcxN,SAAM,kBAAgBxc,WACOyc,YAAAA,2CAAAA,UAAO,SACP;IAC9C,WAAUZ,SAAS,gBAAgB;AAClCmO,qBAAe;IAChB,WAAUnO,SAAS,gBAAgB;AAClCmO,qBAAe;IAChB;EACF,WAAU1b,WAAW,KAAK;AACzB6D,iBAAa;AACb6X,mBAAyBvN,YAAAA,UAAgCzc,2BAAAA,WAAW;EACrE,WAAUsO,WAAW,KAAK;AACzB6D,iBAAa;AACb6X,mBAAY,2BAA4BhqB,WAAW;EACpD,WAAUsO,WAAW,KAAK;AACzB6D,iBAAa;AACb,QAAIqK,UAAUxc,YAAYyc,SAAS;AACjCuN,qBACE,gBAAcxN,OAAO2I,YAAW,IAAE,kBAAgBnlB,WAAQ,YAAA,4CACdyc,UAAO,SACR;eACpCD,QAAQ;AACjBwN,qBAAY,6BAA8BxN,OAAO2I,YAAW,IAAK;IAClE;EACF;AAED,SAAO,IAAIjT,kBACT5D,UAAU,KACV6D,YACA,IAAIhP,MAAM6mB,YAAY,GACtB,IAAI;AAER;AAGA,SAAS9L,aACPxB,SAAqB;AAErB,WAASjW,IAAIiW,QAAQvd,SAAS,GAAGsH,KAAK,GAAGA,KAAK;AAC5C,QAAIkC,SAAS+T,QAAQjW,CAAC;AACtB,QAAImW,iBAAiBjU,MAAM,GAAG;AAC5B,aAAO;QAAEA;QAAQ/E,KAAK6C;;IACvB;EACF;AACH;AAEA,SAAS2e,kBAAkBzkB,MAAQ;AACjC,MAAIqD,aAAa,OAAOrD,SAAS,WAAWC,UAAUD,IAAI,IAAIA;AAC9D,SAAOL,WAAUwD,SAAA,CAAA,GAAME,YAAU;IAAElD,MAAM;EAAE,CAAA,CAAE;AAC/C;AAEA,SAAS0a,iBAAiB1S,GAAaC,GAAW;AAChD,MAAID,EAAE9I,aAAa+I,EAAE/I,YAAY8I,EAAEjI,WAAWkI,EAAElI,QAAQ;AACtD,WAAO;EACR;AAED,MAAIiI,EAAEhI,SAAS,IAAI;AAEjB,WAAOiI,EAAEjI,SAAS;aACTgI,EAAEhI,SAASiI,EAAEjI,MAAM;AAE5B,WAAO;EACR,WAAUiI,EAAEjI,SAAS,IAAI;AAExB,WAAO;EACR;AAID,SAAO;AACT;AAEA,SAAS2iB,gBAAgB9a,QAAe;AACtC,SACEA,UAAU,QACV,OAAOA,WAAW,YAClB,UAAUA,UACV,YAAYA,WACXA,OAAOkT,SAAS5W,WAAWgC,QAAQ0B,OAAOkT,SAAS5W,WAAWP;AAEnE;AAEA,SAASwb,wBAAwBvX,QAAqB;AACpD,SACEqa,WAAWra,OAAOA,MAAM,KAAK+J,oBAAoBjE,IAAI9F,OAAOA,OAAO2F,MAAM;AAE7E;AAEA,SAASyO,iBAAiBpU,QAAkB;AAC1C,SAAOA,OAAOkT,SAAS5W,WAAWmkB;AACpC;AAEA,SAASpM,cAAcrU,QAAkB;AACvC,SAAOA,OAAOkT,SAAS5W,WAAWP;AACpC;AAEA,SAASkY,iBAAiBjU,QAAmB;AAC3C,UAAQA,UAAUA,OAAOkT,UAAU5W,WAAW8M;AAChD;AAEM,SAAUkX,eAAehmB,OAAU;AACvC,MAAImmB,WAAyBnmB;AAC7B,SACEmmB,YACA,OAAOA,aAAa,YACpB,OAAOA,SAASniB,SAAS,YACzB,OAAOmiB,SAASrY,cAAc,cAC9B,OAAOqY,SAASpY,WAAW,cAC3B,OAAOoY,SAASjY,gBAAgB;AAEpC;AAEA,SAAS6R,WAAW/f,OAAU;AAC5B,SACEA,SAAS,QACT,OAAOA,MAAMqL,WAAW,YACxB,OAAOrL,MAAMkP,eAAe,YAC5B,OAAOlP,MAAMsL,YAAY,YACzB,OAAOtL,MAAMyhB,SAAS;AAE1B;AAEA,SAAShB,mBAAmB/a,QAAW;AACrC,MAAI,CAACqa,WAAWra,MAAM,GAAG;AACvB,WAAO;EACR;AAED,MAAI2F,SAAS3F,OAAO2F;AACpB,MAAIxO,WAAW6I,OAAO4F,QAAQiC,IAAI,UAAU;AAC5C,SAAOlC,UAAU,OAAOA,UAAU,OAAOxO,YAAY;AACvD;AAEA,SAAS4iB,cAAclG,QAAc;AACnC,SAAO/J,oBAAoBhE,IAAI+N,OAAOtQ,YAAW,CAAgB;AACnE;AAEA,SAAS2N,iBACP2C,QAAc;AAEd,SAAOjK,qBAAqB9D,IAAI+N,OAAOtQ,YAAW,CAAwB;AAC5E;AAEA,eAAesU,uBACbH,gBACAjD,eACAV,SACAuN,SACAjF,WACAkC,mBAA6B;AAE7B,WAASpoB,QAAQ,GAAGA,QAAQ4d,QAAQvd,QAAQL,SAAS;AACnD,QAAI6J,SAAS+T,QAAQ5d,KAAK;AAC1B,QAAIgI,QAAQsW,cAActe,KAAK;AAI/B,QAAI,CAACgI,OAAO;AACV;IACD;AAED,QAAIqgB,eAAe9G,eAAe8C,KAC/B3N,OAAMA,EAAEnQ,MAAMO,OAAOkB,MAAOzB,MAAMO,EAAE;AAEvC,QAAIskB,uBACF/C,gBAAgB,QAChB,CAACL,mBAAmBK,cAAcrgB,KAAK,MACtCogB,qBAAqBA,kBAAkBpgB,MAAMzB,MAAMO,EAAE,OAAO3G;AAE/D,QAAI8d,iBAAiBpU,MAAM,MAAMqc,aAAakF,uBAAuB;AAInE,UAAIta,SAASqa,QAAQnrB,KAAK;AAC1BkE,gBACE4M,QACA,kEAAkE;AAEpE,YAAM+P,oBAAoBhX,QAAQiH,QAAQoV,SAAS,EAAE5U,KAAMzH,CAAAA,YAAU;AACnE,YAAIA,SAAQ;AACV+T,kBAAQ5d,KAAK,IAAI6J,WAAU+T,QAAQ5d,KAAK;QACzC;MACH,CAAC;IACF;EACF;AACH;AAEA,eAAe6gB,oBACbhX,QACAiH,QACAua,QAAc;AAAA,MAAdA,WAAM,QAAA;AAANA,aAAS;EAAK;AAEd,MAAI1Z,UAAU,MAAM9H,OAAO0V,aAAalN,YAAYvB,MAAM;AAC1D,MAAIa,SAAS;AACX;EACD;AAED,MAAI0Z,QAAQ;AACV,QAAI;AACF,aAAO;QACLtO,MAAM5W,WAAWgC;QACjBA,MAAM0B,OAAO0V,aAAa/M;;aAErB/N,GAAG;AAEV,aAAO;QACLsY,MAAM5W,WAAWP;QACjBA,OAAOnB;;IAEV;EACF;AAED,SAAO;IACLsY,MAAM5W,WAAWgC;IACjBA,MAAM0B,OAAO0V,aAAapX;;AAE9B;AAEA,SAAS6d,mBAAmBjkB,QAAc;AACxC,SAAO,IAAIykB,gBAAgBzkB,MAAM,EAAEupB,OAAO,OAAO,EAAE1gB,KAAMsC,OAAMA,MAAM,EAAE;AACzE;AAEA,SAASuQ,eACP/V,SACA1G,UAA2B;AAE3B,MAAIe,SACF,OAAOf,aAAa,WAAWc,UAAUd,QAAQ,EAAEe,SAASf,SAASe;AACvE,MACE2F,QAAQA,QAAQrH,SAAS,CAAC,EAAEkG,MAAMvG,SAClCgmB,mBAAmBjkB,UAAU,EAAE,GAC/B;AAEA,WAAO2F,QAAQA,QAAQrH,SAAS,CAAC;EAClC;AAGD,MAAIiO,cAAcH,2BAA2BzG,OAAO;AACpD,SAAO4G,YAAYA,YAAYjO,SAAS,CAAC;AAC3C;AAEA,SAASge,4BACPjH,YAAsB;AAEtB,MAAI;IAAErD;IAAYC;IAAYC;IAAaE;IAAMD;IAAU7E,MAAAA;EAAM,IAC/D+H;AACF,MAAI,CAACrD,cAAc,CAACC,cAAc,CAACC,aAAa;AAC9C;EACD;AAED,MAAIE,QAAQ,MAAM;AAChB,WAAO;MACLJ;MACAC;MACAC;MACAC,UAAU/T;MACVkP,MAAMlP;MACNgU;;EAEH,WAAUD,YAAY,MAAM;AAC3B,WAAO;MACLH;MACAC;MACAC;MACAC;MACA7E,MAAMlP;MACNgU,MAAMhU;;EAET,WAAUkP,UAASlP,QAAW;AAC7B,WAAO;MACL4T;MACAC;MACAC;MACAC,UAAU/T;MACVkP,MAAAA;MACA8E,MAAMhU;;EAET;AACH;AAEA,SAASgd,qBACPnc,UACA2a,YAAuB;AAEvB,MAAIA,YAAY;AACd,QAAIvE,aAA0C;MAC5ClX,OAAO;MACPc;MACA+S,YAAY4H,WAAW5H;MACvBC,YAAY2H,WAAW3H;MACvBC,aAAa0H,WAAW1H;MACxBC,UAAUyH,WAAWzH;MACrB7E,MAAMsM,WAAWtM;MACjB8E,MAAMwH,WAAWxH;;AAEnB,WAAOiD;EACR,OAAM;AACL,QAAIA,aAA0C;MAC5ClX,OAAO;MACPc;MACA+S,YAAY5T;MACZ6T,YAAY7T;MACZ8T,aAAa9T;MACb+T,UAAU/T;MACVkP,MAAMlP;MACNgU,MAAMhU;;AAER,WAAOiX;EACR;AACH;AAEA,SAASmG,wBACPvc,UACA2a,YAAsB;AAEtB,MAAIvE,aAA6C;IAC/ClX,OAAO;IACPc;IACA+S,YAAY4H,WAAW5H;IACvBC,YAAY2H,WAAW3H;IACvBC,aAAa0H,WAAW1H;IACxBC,UAAUyH,WAAWzH;IACrB7E,MAAMsM,WAAWtM;IACjB8E,MAAMwH,WAAWxH;;AAEnB,SAAOiD;AACT;AAEA,SAASyH,kBACPlD,YACAxT,MAAsB;AAEtB,MAAIwT,YAAY;AACd,QAAItB,UAAoC;MACtCna,OAAO;MACP6T,YAAY4H,WAAW5H;MACvBC,YAAY2H,WAAW3H;MACvBC,aAAa0H,WAAW1H;MACxBC,UAAUyH,WAAWzH;MACrB7E,MAAMsM,WAAWtM;MACjB8E,MAAMwH,WAAWxH;MACjBhM;;AAEF,WAAOkS;EACR,OAAM;AACL,QAAIA,UAAoC;MACtCna,OAAO;MACP6T,YAAY5T;MACZ6T,YAAY7T;MACZ8T,aAAa9T;MACb+T,UAAU/T;MACVkP,MAAMlP;MACNgU,MAAMhU;MACNgI;;AAEF,WAAOkS;EACR;AACH;AAEA,SAAS6F,qBACPvE,YACAqE,iBAAyB;AAEzB,MAAI3F,UAAuC;IACzCna,OAAO;IACP6T,YAAY4H,WAAW5H;IACvBC,YAAY2H,WAAW3H;IACvBC,aAAa0H,WAAW1H;IACxBC,UAAUyH,WAAWzH;IACrB7E,MAAMsM,WAAWtM;IACjB8E,MAAMwH,WAAWxH;IACjBhM,MAAM6X,kBAAkBA,gBAAgB7X,OAAOhI;;AAEjD,SAAOka;AACT;AAEA,SAASkG,eAAepY,MAAqB;AAC3C,MAAIkS,UAAiC;IACnCna,OAAO;IACP6T,YAAY5T;IACZ6T,YAAY7T;IACZ8T,aAAa9T;IACb+T,UAAU/T;IACVkP,MAAMlP;IACNgU,MAAMhU;IACNgI;;AAEF,SAAOkS;AACT;AAEA,SAASZ,0BACP8R,SACAC,aAAqC;AAErC,MAAI;AACF,QAAIC,mBAAmBF,QAAQG,eAAeC,QAC5C/W,uBAAuB;AAEzB,QAAI6W,kBAAkB;AACpB,UAAIpc,QAAOhO,KAAKqlB,MAAM+E,gBAAgB;AACtC,eAAS,CAACrZ,GAAGlF,CAAC,KAAKzB,OAAO5L,QAAQwP,SAAQ,CAAA,CAAE,GAAG;AAC7C,YAAInC,KAAKkD,MAAMC,QAAQnD,CAAC,GAAG;AACzBse,sBAAY5b,IAAIwC,GAAG,IAAI/L,IAAI6G,KAAK,CAAA,CAAE,CAAC;QACpC;MACF;IACF;WACMzI,GAAG;EACV;AAEJ;AAEA,SAASkV,0BACP4R,SACAC,aAAqC;AAErC,MAAIA,YAAYjZ,OAAO,GAAG;AACxB,QAAIlD,QAAiC,CAAA;AACrC,aAAS,CAAC+C,GAAGlF,CAAC,KAAKse,aAAa;AAC9Bnc,MAAAA,MAAK+C,CAAC,IAAI,CAAC,GAAGlF,CAAC;IAChB;AACD,QAAI;AACFqe,cAAQG,eAAeE,QACrBhX,yBACAvT,KAAKC,UAAU+N,KAAI,CAAC;aAEfzJ,OAAO;AACdzE,cACE,OAC8DyE,gEAAAA,QAAK,IAAI;IAE1E;EACF;AACH;",
  "names": ["Action", "PopStateEventType", "createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "createHref", "createPath", "history", "createURL", "URL", "encodeLocation", "path", "parsePath", "search", "hash", "push", "Push", "nextLocation", "splice", "delta", "replace", "Replace", "go", "nextIndex", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "substr", "startsWith", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "random", "toString", "getHistoryState", "idx", "current", "_extends", "_ref", "parsedPath", "searchIndex", "getLocation", "validateLocation", "defaultView", "getIndex", "replaceState", "handlePop", "historyState", "pushState", "error", "DOMException", "name", "assign", "origin", "addEventListener", "removeEventListener", "ResultType", "immutableRouteKeys", "Set", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "treePath", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "decoded", "decodePath", "matchRouteBranch", "convertRouteMatchToUiMatch", "match", "loaderData", "params", "data", "handle", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "matchPath", "Object", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "prefix", "p", "String", "array", "isLastSegment", "star", "keyMatch", "optional", "param", "pattern", "matcher", "compiledParams", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "regexpSource", "_", "RegExp", "v", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "getResolveToMatches", "v7_relativeSplatPath", "pathMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "getToPathname", "paths", "json", "init", "responseInit", "status", "headers", "Headers", "has", "set", "Response", "AbortedDeferredError", "DeferredData", "constructor", "pendingKeysSet", "subscribers", "deferredKeys", "Array", "isArray", "reject", "abortPromise", "Promise", "r", "controller", "AbortController", "onAbort", "unlistenAbortSignal", "signal", "acc", "_ref2", "trackPromise", "done", "add", "promise", "race", "then", "onSettle", "catch", "defineProperty", "get", "aborted", "delete", "undefinedError", "emit", "settledKey", "subscriber", "subscribe", "cancel", "abort", "k", "resolveData", "resolve", "size", "unwrappedData", "_ref3", "unwrapTrackedPromise", "pendingKeys", "isTrackedPromise", "_tracked", "_error", "_data", "defer", "redirect", "redirectDocument", "response", "ErrorResponseImpl", "statusText", "internal", "isRouteErrorResponse", "validMutationMethodsArr", "validMutationMethods", "validRequestMethodsArr", "validRequestMethods", "redirectStatusCodes", "redirectPreserveMethodStatusCodes", "IDLE_NAVIGATION", "formMethod", "formAction", "formEncType", "formData", "text", "IDLE_FETCHER", "IDLE_BLOCKER", "proceed", "reset", "ABSOLUTE_URL_REGEX", "defaultMapRouteProperties", "hasErrorBoundary", "Boolean", "TRANSITIONS_STORAGE_KEY", "createRouter", "routerWindow", "isBrowser", "createElement", "isServer", "detectErrorBoundary", "dataRoutes", "inFlightDataRoutes", "dataStrategyImpl", "unstable_dataStrategy", "defaultDataStrategy", "future", "v7_fetcherPersist", "v7_normalizeFormMethod", "v7_partialHydration", "v7_prependBasename", "unstable_skipActionErrorRevalidation", "unlistenHistory", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "hasLazyRoutes", "m", "lazy", "hasLoaders", "loader", "errors", "isRouteInitialized", "hydrate", "findIndex", "router", "historyAction", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "actionData", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "pendingViewTransitionEnabled", "appliedViewTransitions", "removePageHideEventListener", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeFetchers", "deletedFetchers", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "blockerKey", "shouldBlockNavigation", "currentLocation", "updateBlocker", "updateState", "startNavigation", "restoreAppliedTransitions", "_saveAppliedTransitions", "persistAppliedTransitions", "initialHydration", "dispose", "clear", "deleteFetcher", "deleteBlocker", "newState", "opts", "completedFetchers", "deletedFetchersKeys", "fetcher", "unstable_viewTransitionOpts", "viewTransitionOpts", "unstable_flushSync", "flushSync", "completeNavigation", "_temp", "_location$state", "_location$state2", "isActionReload", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "priorPaths", "toPaths", "getSavedScrollPosition", "navigate", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "submission", "normalizeNavigateOptions", "userReplace", "pendingError", "enableViewTransition", "unstable_viewTransition", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "request", "createClientSideRequest", "pendingActionResult", "findNearestBoundary", "type", "actionResult", "handleAction", "shortCircuited", "getLoadingNavigation", "handleLoaders", "fetcherSubmission", "getActionDataForCommit", "getSubmittingNavigation", "actionMatch", "getTargetMatch", "method", "routeId", "results", "callDataStrategy", "isRedirectResult", "normalizeRedirectLocation", "startRedirectNavigation", "isDeferredResult", "isErrorResult", "boundaryMatch", "activeSubmission", "getSubmissionFromNavigation", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "updatedFetchers", "markFetchRedirectsDone", "rf", "revalidatingFetcher", "getLoadingFetcher", "abortFetcher", "abortPendingFetchRevalidations", "f", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "findRedirect", "fetcherKey", "processLoaderData", "deferredData", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "fetch", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "updateFetcherState", "getSubmittingFetcher", "abortController", "fetchRequest", "originatingLoadId", "actionResults", "getDoneFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "doneFetcher", "resolveDeferredData", "_temp2", "redirectLocation", "isDocumentReload", "redirectHistoryAction", "callDataStrategyImpl", "all", "isRedirectHandlerResult", "normalizeRelativeRoutingRedirectResponse", "convertHandlerResultToDataResult", "currentMatches", "fetchersToLoad", "fetcherRequest", "resolveDeferredResults", "getFetcher", "deleteFetcherAndUpdateState", "count", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "_ref4", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "getScrollKey", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "UNSAFE_DEFERRED_SYMBOL", "Symbol", "createStaticHandler", "v7_throwAbortReason", "query", "_temp3", "requestContext", "skipLoaderErrorBubbling", "isValidMethod", "methodNotAllowedMatches", "statusCode", "loaderHeaders", "actionHeaders", "queryImpl", "isResponse", "queryRoute", "_temp4", "find", "values", "_result$activeDeferre", "routeMatch", "submit", "loadRouteData", "isHandlerResult", "isRedirectResponse", "isRouteRequest", "throwStaticHandlerAbortedError", "Location", "loaderRequest", "Request", "context", "getLoaderMatchesUntilBoundary", "processRouteLoaderData", "executedLoaders", "fromEntries", "getStaticContextFromError", "newContext", "_deepestRenderedBoundaryId", "reason", "isSubmissionNavigation", "body", "prependBasename", "contextualMatches", "activeRouteMatch", "hasNakedIndexQuery", "normalizeFormMethod", "isFetcher", "getInvalidBodyError", "rawFormMethod", "toUpperCase", "stripHashFromPath", "FormData", "URLSearchParams", "_ref5", "parse", "searchParams", "convertFormDataToSearchParams", "convertSearchParamsToFormData", "append", "boundaryId", "boundaryMatches", "isInitialLoad", "skipActionErrorRevalidation", "currentUrl", "nextUrl", "actionStatus", "shouldSkipRevalidation", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "unstable_actionStatus", "defaultShouldRevalidate", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "routeIdsToLoad", "loadedMatches", "shouldLoad", "handlerOverride", "callLoaderOrAction", "staticContext", "onReject", "runHandler", "handler", "actualHandler", "ctx", "handlerPromise", "val", "handlerError", "handlerResult", "contentType", "isDeferredData", "_result$init", "_result$init2", "deferred", "trimmedMatches", "normalizedLocation", "protocol", "isSameBasename", "foundError", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "_temp5", "errorMessage", "signals", "isRevalidatingLoader", "unwrap", "getAll", "_window", "transitions", "sessionPositions", "sessionStorage", "getItem", "setItem"]
}
